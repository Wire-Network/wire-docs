openapi: 3.0.0
info:
  title: Producer API
  description: >-
    Nodeop Producer API Specification. See developer documentation at
    https://docs.wire.network/docs/api-reference/tooling/nodeop/plugins/producer-api-plugin
    for information on enabling this plugin.
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    url: https://wire.network
tags:
  - name: Protocol Version 3.1
servers:
  - url: '{protocol}://{host}:{port}/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        default: '8080'
security:
  - {}
paths:
  /producer/pause:
    post:
      summary: pause
      description: Pause producer node. Takes no arguments and returns no values.
      operationId: pause
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/pause \
                 --header 'accept: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url = 'http://localhost:8080/v1/producer/pause';

            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/pause"

            headers = {"accept": "application/json"}

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch('http://localhost:8080/v1/producer/pause', options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/resume:
    post:
      summary: resume
      description: Resume producer node. Takes no arguments and returns no values.
      operationId: resume
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/resume \
                 --header 'accept: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url = 'http://localhost:8080/v1/producer/resume';

            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/resume"

            headers = {"accept": "application/json"}

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch('http://localhost:8080/v1/producer/resume', options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/paused:
    post:
      summary: paused
      description: >-
        Retrieves paused status for producer node. Takes no arguments and
        returns no values.
      operationId: paused
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK_PAUSED'
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/paused \
                 --header 'accept: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url = 'http://localhost:8080/v1/producer/paused';

            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/paused"

            headers = {"accept": "application/json"}

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch('http://localhost:8080/v1/producer/paused', options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/get_runtime_options:
    post:
      summary: get_runtime_options
      description: Retrieves runtime options for producer node.
      operationId: get_runtime_options
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Runtime_Options'
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/get_runtime_options \
                 --header 'accept: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url = 'http://localhost:8080/v1/producer/get_runtime_options';

            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/get_runtime_options"

            headers = {"accept": "application/json"}

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch('http://localhost:8080/v1/producer/get_runtime_options',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/update_runtime_options:
    post:
      summary: update_runtime_options
      description: >-
        Update runtime options for producer node. May post any of the runtime
        options in combination or alone.
      operationId: update_runtime_options
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Runtime_Options'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/update_runtime_options \
                 --header 'accept: application/json' \
                 --header 'content-type: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url =
            'http://localhost:8080/v1/producer/update_runtime_options';

            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/update_runtime_options"

            headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch('http://localhost:8080/v1/producer/update_runtime_options',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/get_greylist:
    post:
      summary: get_greylist
      description: Retrieves the greylist for producer node.
      operationId: get_greylist
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    description: Array of account names stored in the greylist
                    items:
                      $ref: refs/Name.yaml
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/get_greylist \
                 --header 'accept: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url = 'http://localhost:8080/v1/producer/get_greylist';

            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/get_greylist"

            headers = {"accept": "application/json"}

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch('http://localhost:8080/v1/producer/get_greylist', options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/add_greylist_accounts:
    post:
      summary: add_greylist_accounts
      description: >-
        Adds accounts to greylist for producer node. At least one account is
        required.
      operationId: add_greylist_accounts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accounts:
                  type: array
                  description: List of account names to add
                  items:
                    $ref: refs/Name.yaml
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/add_greylist_accounts \
                 --header 'accept: application/json' \
                 --header 'content-type: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url =
            'http://localhost:8080/v1/producer/add_greylist_accounts';

            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/add_greylist_accounts"

            headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch('http://localhost:8080/v1/producer/add_greylist_accounts',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/remove_greylist_accounts:
    post:
      summary: remove_greylist_accounts
      description: >-
        Removes accounts from greylist for producer node. At least one account
        is required.
      operationId: remove_greylist_accounts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accounts:
                  type: array
                  description: List of account names to remove
                  items:
                    $ref: refs/Name.yaml
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/remove_greylist_accounts \
                 --header 'accept: application/json' \
                 --header 'content-type: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url =
            'http://localhost:8080/v1/producer/remove_greylist_accounts';

            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/remove_greylist_accounts"

            headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch('http://localhost:8080/v1/producer/remove_greylist_accounts',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/get_whitelist_blacklist:
    post:
      summary: get_whitelist_blacklist
      description: >-
        Retrieves the whitelist and blacklist for producer node. A JSON object
        containing whitelist and blacklist information.
      operationId: get_whitelist_blacklist
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  actor_whitelist:
                    type: array
                    items:
                      $ref: refs/Name.yaml
                  actor_blacklist:
                    type: array
                    items:
                      $ref: refs/Name.yaml
                  contract_whitelist:
                    type: array
                    items:
                      $ref: refs/Name.yaml
                  contract_blacklist:
                    type: array
                    items:
                      $ref: refs/Name.yaml
                  action_blacklist:
                    type: array
                    items:
                      type: array
                      description: >-
                        Array of two string values, the account name as the
                        first and action name as the second
                      items:
                        allOf:
                          - $ref: refs/Name.yaml
                          - $ref: refs/CppSignature.yaml
                  key_blacklist:
                    type: array
                    items:
                      $ref: refs/KeyType.yaml
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/get_whitelist_blacklist \
                 --header 'accept: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url =
            'http://localhost:8080/v1/producer/get_whitelist_blacklist';

            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/get_whitelist_blacklist"

            headers = {"accept": "application/json"}

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch('http://localhost:8080/v1/producer/get_whitelist_blacklist',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/set_whitelist_blacklist:
    post:
      summary: set_whitelist_blacklist
      description: >-
        Defines the whitelist and blacklist for a producer node. Takes a JSON
        object containing whitelist and blacklist information.
      operationId: set_whitelist_blacklist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                actor_whitelist:
                  type: array
                  items:
                    $ref: refs/Name.yaml
                actor_blacklist:
                  type: array
                  items:
                    $ref: refs/Name.yaml
                contract_whitelist:
                  type: array
                  items:
                    $ref: refs/Name.yaml
                contract_blacklist:
                  type: array
                  items:
                    $ref: refs/Name.yaml
                action_blacklist:
                  type: array
                  items:
                    type: array
                    description: >-
                      Array of two string values, the account name as the first
                      and action name as the second
                    items:
                      anyOf:
                        - $ref: refs/Name.yaml
                        - $ref: refs/CppSignature.yaml
                key_blacklist:
                  type: array
                  items:
                    $ref: refs/KeyType.yaml
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/set_whitelist_blacklist \
                 --header 'accept: application/json' \
                 --header 'content-type: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url =
            'http://localhost:8080/v1/producer/set_whitelist_blacklist';

            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/set_whitelist_blacklist"

            headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch('http://localhost:8080/v1/producer/set_whitelist_blacklist',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/create_snapshot:
    post:
      summary: create_snapshot
      description: >-
        Creates a snapshot for producer node. Returns error when unable to
        create a snapshot.
      operationId: create_snapshot
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  head_block_id:
                    $ref: refs/Sha256.yaml
                  head_block_num:
                    type: integer
                    description: Highest block number on the chain
                    example: 5102
                  head_block_time:
                    type: string
                    description: Highest block unix timestamp
                    example: 2020-11-16T00:00:00.000Z
                  version:
                    type: integer
                    description: version number
                    example: 6
                  snapshot_name:
                    type: string
                    description: The path and file name of the snapshot
                    example: >-
                      /home/me/nodes/node-name/snapshots/snapshot-0000999f99999f9f999f99f99ff9999f999f9fff99ff99ffff9f9f9fff9f9999.bin
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/create_snapshot \
                 --header 'accept: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url = 'http://localhost:8080/v1/producer/create_snapshot';

            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/create_snapshot"

            headers = {"accept": "application/json"}

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch('http://localhost:8080/v1/producer/create_snapshot', options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/get_integrity_hash:
    post:
      summary: get_integrity_hash
      description: Retrieves the integrity hash for producer node
      operationId: get_integrity_hash
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Defines the integrity hash information details
                properties:
                  head_block_id:
                    $ref: refs/Sha256.yaml
                  integrity_hash:
                    $ref: refs/Sha256.yaml
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/get_integrity_hash \
                 --header 'accept: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url = 'http://localhost:8080/v1/producer/get_integrity_hash';

            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/producer/get_integrity_hash"

            headers = {"accept": "application/json"}

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {method: 'POST', headers: {accept:
            'application/json'}};


            fetch('http://localhost:8080/v1/producer/get_integrity_hash',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/schedule_protocol_feature_activations:
    post:
      summary: schedule_protocol_feature_activations
      description: >-
        Schedule protocol feature activation for producer node. Note some
        features may require pre-activation. Will return error for duplicate
        requests or when feature required pre-activation.
      operationId: schedule_protocol_feature_activations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                protocol_features_to_activate:
                  type: array
                  description: List of protocol features to activate
                  items:
                    $ref: refs/Sha256.yaml
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/schedule_protocol_feature_activations \
                 --header 'accept: application/json' \
                 --header 'content-type: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url =
            'http://localhost:8080/v1/producer/schedule_protocol_feature_activations';

            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: >-
            import requests


            url =
            "http://localhost:8080/v1/producer/schedule_protocol_feature_activations"


            headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }


            response = requests.post(url, headers=headers)


            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch('http://localhost:8080/v1/producer/schedule_protocol_feature_activations',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/get_supported_protocol_features:
    post:
      summary: get_supported_protocol_features
      description: >-
        Retrieves supported protocol features for producer node. Pass filters in
        as part of the request body.
      operationId: get_supported_protocol_features
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                exclude_disabled:
                  type: boolean
                  description: Exclude disabled protocol features
                exclude_unactivatable:
                  type: boolean
                  description: Exclude unactivatable protocol features
                  example: false
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: >-
                  Variant type, an array of strings with the supported protocol
                  features
                items:
                  type: object
                  properties:
                    feature_digest:
                      $ref: refs/Sha256.yaml
                    subjective_restrictions:
                      type: object
                      properties:
                        enabled:
                          type: boolean
                          example: true
                        preactivation_required:
                          type: boolean
                          example: true
                        earliest_allowed_activation_time:
                          type: string
                          example: '1970-01-01T00:00:00.000'
                        description_digest:
                          $ref: refs/Sha256.yaml
                        dependencies:
                          type: array
                          items:
                            $ref: refs/Sha256.yaml
                        protocol_feature_type:
                          type: string
                          example: builtin
                        specification:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              value:
                                type: string
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/get_supported_protocol_features \
                 --header 'accept: application/json' \
                 --header 'content-type: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url =
            'http://localhost:8080/v1/producer/get_supported_protocol_features';

            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: >-
            import requests


            url =
            "http://localhost:8080/v1/producer/get_supported_protocol_features"


            headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }


            response = requests.post(url, headers=headers)


            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch('http://localhost:8080/v1/producer/get_supported_protocol_features',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /producer/get_account_ram_corrections:
    post:
      summary: get_account_ram_corrections
      description: Retrieves accounts with ram corrections.
      operationId: get_account_ram_corrections
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lower_bound:
                  type: integer
                  description: lowest account key
                upper_bound:
                  type: integer
                  description: highest account key
                limit:
                  type: integer
                  description: number of rows to scan
                  example: 10
                reverse:
                  type: boolean
                  description: direction of search
                  example: false
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - rows
                properties:
                  rows:
                    type: array
                    items:
                      type: string
                  more:
                    type: array
                    items:
                      - $ref: refs/Name.yaml
        '400':
          description: client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/producer/get_account_ram_corrections \
                 --header 'accept: application/json' \
                 --header 'content-type: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url =
            'http://localhost:8080/v1/producer/get_account_ram_corrections';

            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: >-
            import requests


            url =
            "http://localhost:8080/v1/producer/get_account_ram_corrections"


            headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }


            response = requests.post(url, headers=headers)


            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch('http://localhost:8080/v1/producer/get_account_ram_corrections',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
components:
  securitySchemes: {}
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          description: http return code
          example: 400
        message:
          type: string
          description: summary of error
          example: Invalid Request
        error:
          type: object
          description: details on the error
          properties:
            code:
              type: integer
              description: internal error code
              example: 3200006
            name:
              type: string
              description: name of error
              example: invalid_http_request
            what:
              type: string
              description: prettier version of error name
              example: invalid http request
            details:
              type: array
              description: list of additional information for debugging
              items:
                type: object
                properties:
                  message:
                    type: string
                    description: debugging message
                    example: Unable to parse valid input from POST body
                  file:
                    type: string
                    description: file where error was thrown
                    example: http_plugin.hpp
                  line_number:
                    type: integer
                    description: line number in file where error was thrown
                    example: 246
                  method:
                    type: string
                    description: function executed when error occurred
                    example: parse_params
    OK:
      type: object
      properties:
        result:
          type: string
          description: status
          example: ok
    OK_PAUSED:
      type: object
      properties:
        json:
          type: boolean
          description: true/false indicating paused state
          example: true
    Runtime_Options:
      type: object
      properties:
        max_transaction_time:
          type: integer
          description: Max transaction time
          example: 100
        max_irreversible_block_age:
          type: integer
          description: Max irreversible block age
          example: -1
        produce_time_offset_us:
          type: integer
          description: Time offset
          example: -100000
        last_block_time_offset_us:
          type: integer
          description: Last block time offset
          example: -200000
        max_scheduled_transaction_time_per_block_ms:
          type: integer
          description: Max scheduled transaction time per block in ms
          example: 100
        subjective_cpu_leeway_us:
          type: integer
          description: in micro seconds
          example: 10
        incoming_defer_ratio:
          type: string
          description: Incoming defer ratio, parsed to double
          example: '1.00000000000000000'
        greylist_limit:
          type: integer
          description: limit on number of Names supported by greylist
          example: 1000
