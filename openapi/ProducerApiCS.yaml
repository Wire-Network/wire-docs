openapi: 3.0.0
info:
  title: Producer API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    url: https://wire.network
servers:
  - url: "{protocol}://{host}:{port}/v1/"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        default: "8887"
components:
  securitySchemes: {}
  schemas: {}
security:
  - {}

paths:
  "/producer/pause":
    post:
      summary: pause
      description: Pause producer node
      operationId: pause
      parameters: []
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: returns status
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/pause" \
              -H "Content-Type: application/json" \
              -d '{}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            fetch("http://localhost:8887/v1/producer/pause", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({})
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/pause"
            payload = {}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/resume":
    post:
      summary: resume
      description: Resume producer node
      operationId: resume
      parameters: []
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              type: object
              description: Resumes activity for producer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: void
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/resume" \
              -H "Content-Type: application/json" \
              -d '{}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            fetch("http://localhost:8887/v1/producer/resume", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({})
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/resume"
            payload = {}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/paused":
    post:
      summary: paused
      description: Retreives paused status for producer node
      operationId: paused
      parameters: []
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: True if producer is paused, false otherwise
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/paused" \
              -H "Content-Type: application/json" \
              -d '{}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            fetch("http://localhost:8887/v1/producer/paused", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({})
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/paused"
            payload = {}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/get_runtime_options":
    post:
      summary: get_runtime_options
      description: Retreives run time options for producer node
      operationId: get_runtime_options
      parameters: []
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Returns run time options set for the producer
                properties:
                  max_transaction_time:
                    type: integer
                    description: Max transaction time
                  max_irreversible_block_age:
                    type: integer
                    description: Max irreversible block age
                  produce_time_offset_us:
                    type: integer
                    description: Time offset
                  last_block_time_offset_us:
                    type: integer
                    description: Last block time offset
                  max_scheduled_transaction_time_per_block_ms:
                    type: integer
                    description: Max scheduled transaction time per block in ms
                  subjective_cpu_leeway_us:
                    type: integer
                    description: Subjective CPU leeway
                  incoming_defer_ratio:
                    type: integer
                    description: Incoming defer ration
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/get_runtime_options" \
              -H "Content-Type: application/json" \
              -d '{}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            fetch("http://localhost:8887/v1/producer/get_runtime_options", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({})
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/get_runtime_options"
            payload = {}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/update_runtime_options":
    post:
      summary: update_runtime_options
      description: Update run time options for producer node
      operationId: update_runtime_options
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              options:
                max_transaction_time: 100
                max_irreversible_block_age: -1
                produce_time_offset_us: -100000
                last_block_time_offset_us: -200000
                max_scheduled_transaction_time_per_block_ms: 100
                subjective_cpu_leeway_us: 10
                incoming_defer_ratio: 1
            schema:
              type: object
              required:
                - options
              properties:
                options:
                  type: object
                  description: Defines the run time options to set for the producer
                  properties:
                    max_transaction_time:
                      type: integer
                      description: Max transaction time
                    max_irreversible_block_age:
                      type: integer
                      description: Max irreversible block age
                    produce_time_offset_us:
                      type: integer
                      description: Time offset
                    last_block_time_offset_us:
                      type: integer
                      description: Last block time offset
                    max_scheduled_transaction_time_per_block_ms:
                      type: integer
                      description: Max scheduled transaction time per block in ms
                    subjective_cpu_leeway_us:
                      type: integer
                      description: Subjective CPU leeway
                    incoming_defer_ratio:
                      type: integer
                      description: Incoming defer ration
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: void
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/update_runtime_options" \
              -H "Content-Type: application/json" \
              -d '{
                "options": {
                  "max_transaction_time": 100,
                  "max_irreversible_block_age": -1,
                  "produce_time_offset_us": -100000,
                  "last_block_time_offset_us": -200000,
                  "max_scheduled_transaction_time_per_block_ms": 100,
                  "subjective_cpu_leeway_us": 10,
                  "incoming_defer_ratio": 1
                }
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const payload = {
              options: {
                max_transaction_time: 100,
                max_irreversible_block_age: -1,
                produce_time_offset_us: -100000,
                last_block_time_offset_us: -200000,
                max_scheduled_transaction_time_per_block_ms: 100,
                subjective_cpu_leeway_us: 10,
                incoming_defer_ratio: 1
              }
            };

            fetch("http://localhost:8887/v1/producer/update_runtime_options", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/update_runtime_options"
            payload = {
              "options": {
                "max_transaction_time": 100,
                "max_irreversible_block_age": -1,
                "produce_time_offset_us": -100000,
                "last_block_time_offset_us": -200000,
                "max_scheduled_transaction_time_per_block_ms": 100,
                "subjective_cpu_leeway_us": 10,
                "incoming_defer_ratio": 1
              }
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/get_greylist":
    post:
      summary: get_greylist
      description: Retreives the greylist for producer node
      operationId: get_greylist
      parameters: []
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: List of account names stored in the greylist
                items:
                  anyOf:
                    - type: string
                      description: String representation of privileged SYSIO name type
                      pattern: "^(sysio[\\.][a-z1-5]{1,6})([a-j]{1})?$"
                      title: NamePrivileged
                    - type: string
                      description: String representation of basic SYSIO name type, must be 12 characters and contain only a-z and 0-5
                      pattern: "^([a-z]{1}[a-z1-5]{11})([a-j]{1})?$"
                      title: NameBasic
                    - type: string
                      description: String representation of SYSIO bid name type, 1-12 characters and only a-z and 0-5 are allowed
                      pattern: "^([a-z1-5]{1,12})([a-j]{1})?$"
                      title: NameBid
                    - type: string
                      description: String representation of SYSIO name type
                      pattern: "^([a-z1-5]{1}[a-z1-5\\.]{0,10}[a-z1-5]{1})([a-j]{1})?$"
                      title: NameCatchAll
                  title: Name
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/get_greylist" \
              -H "Content-Type: application/json" \
              -d '{}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            fetch("http://localhost:8887/v1/producer/get_greylist", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({})
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/get_greylist"
            payload = {}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/add_greylist_accounts":
    post:
      summary: add_greylist_accounts
      description: Adds accounts to grey list for producer node
      operationId: add_greylist_accounts
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              params:
                accounts:
                  - "acc1"
                  - "acc2"
            schema:
              type: object
              required:
                - params
              properties:
                params:
                  type: object
                  properties:
                    accounts:
                      type: array
                      description: List of account names to add
                      items:
                        "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: void
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/add_greylist_accounts" \
              -H "Content-Type: application/json" \
              -d '{
                "params": {
                  "accounts": ["acc1", "acc2"]
                }
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const payload = {
              params: {
                accounts: ["acc1", "acc2"]
              }
            };

            fetch("http://localhost:8887/v1/producer/add_greylist_accounts", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/add_greylist_accounts"
            payload = {
              "params": {
                "accounts": ["acc1", "acc2"]
              }
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/remove_greylist_accounts":
    post:
      summary: remove_greylist_accounts
      description: Removes accounts from greylist for producer node
      operationId: remove_greylist_accounts
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              params:
                accounts:
                  - "acc1"
            schema:
              type: object
              required:
                - params
              properties:
                params:
                  type: object
                  properties:
                    accounts:
                      type: array
                      description: List of account names to remove
                      items:
                        "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: List of account names stored in the greylist
                items:
                  "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/remove_greylist_accounts" \
              -H "Content-Type: application/json" \
              -d '{
                "params": {
                  "accounts": ["acc1"]
                }
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const payload = {
              params: {
                accounts: ["acc1"]
              }
            };

            fetch("http://localhost:8887/v1/producer/remove_greylist_accounts", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/remove_greylist_accounts"
            payload = {
              "params": {
                "accounts": ["acc1"]
              }
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/get_whitelist_blacklist":
    post:
      summary: get_whitelist_blacklist
      description: Retreives the white list and black list for producer node
      operationId: get_whitelist_blacklist
      parameters: []
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Defines the actor whitelist and blacklist, the contract whitelist
                  and blacklist, the action blacklist and key blacklist
                properties:
                  actor_whitelist:
                    type: array
                    items:
                      "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                  actor_blacklist:
                    type: array
                    items:
                      "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                  contract_whitelist:
                    type: array
                    items:
                      "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                  contract_blacklist:
                    type: array
                    items:
                      "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                  action_blacklist:
                    type: array
                    items:
                      type: array
                      description: Array of two string values, the account name as the first and action name as the second
                      items:
                        allOf:
                          - "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                          - type: string
                            description: C++ variable signature
                            pattern: "^([a-z1-9]{1}[a-z1-9_]{0,30}[a-z1-9]{1})$"
                            title: CppSignature
                  key_blacklist:
                    type: array
                    items:
                      type: string
                      enum:
                        - uint64
                        - double
                      title: KeyType
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/get_whitelist_blacklist" \
              -H "Content-Type: application/json" \
              -d '{}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            fetch("http://localhost:8887/v1/producer/get_whitelist_blacklist", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({})
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/get_whitelist_blacklist"
            payload = {}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/set_whitelist_blacklist":
    post:
      summary: set_whitelist_blacklist
      description: Sets the white list and black list for producer node
      operationId: set_whitelist_blacklist
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              params:
                actor_whitelist: ["accA","accB"]
                actor_blacklist: []
                contract_whitelist: []
                contract_blacklist: []
                action_blacklist: 
                  - ["accA","transfer"]
                key_blacklist: ["uint64"]
            schema:
              type: object
              required:
                - params
              properties:
                params:
                  type: object
                  description: Defines the actor whitelist and blacklist, the contract whitelist
                    and blacklist, the action blacklist and key blacklist
                  properties:
                    actor_whitelist:
                      type: array
                      items:
                        "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                    actor_blacklist:
                      type: array
                      items:
                        "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                    contract_whitelist:
                      type: array
                      items:
                        "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                    contract_blacklist:
                      type: array
                      items:
                        "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                    action_blacklist:
                      type: array
                      items:
                        type: array
                        description: Array of two string values, the account name as the first and action name as the second
                        items:
                          allOf:
                            - "$ref": "#/paths/~1producer~1get_greylist/post/responses/200/content/application~1json/schema/items"
                            - "$ref": "#/paths/~1producer~1get_whitelist_blacklist/post/responses/200/content/application~1json/schema/properties/action_blacklist/items/items/allOf/1"
                    key_blacklist:
                      type: array
                      items:
                        "$ref": "#/paths/~1producer~1get_whitelist_blacklist/post/responses/200/content/application~1json/schema/properties/key_blacklist/items"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: void
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/set_whitelist_blacklist" \
              -H "Content-Type: application/json" \
              -d '{
                "params": {
                  "actor_whitelist": ["accA","accB"],
                  "actor_blacklist": [],
                  "contract_whitelist": [],
                  "contract_blacklist": [],
                  "action_blacklist": [
                    ["accA","transfer"]
                  ],
                  "key_blacklist": ["uint64"]
                }
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const payload = {
              params: {
                actor_whitelist: ["accA", "accB"],
                actor_blacklist: [],
                contract_whitelist: [],
                contract_blacklist: [],
                action_blacklist: [
                  ["accA","transfer"]
                ],
                key_blacklist: ["uint64"]
              }
            };

            fetch("http://localhost:8887/v1/producer/set_whitelist_blacklist", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/set_whitelist_blacklist"
            payload = {
              "params": {
                "actor_whitelist": ["accA","accB"],
                "actor_blacklist": [],
                "contract_whitelist": [],
                "contract_blacklist": [],
                "action_blacklist": [
                  ["accA","transfer"]
                ],
                "key_blacklist": ["uint64"]
              }
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/create_snapshot":
    post:
      summary: create_snapshot
      description: Creates a snapshot for producer node
      operationId: create_snapshot
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              next:
                snapshot_name: "my-snapshot"
                head_block_id: "ABCDEF123456..."
            schema:
              type: object
              required:
                - next
              properties:
                next:
                  type: object
                  description: Defines the snapshot to be created
                  properties:
                    snapshot_name:
                      type: string
                      description: The name of the snapshot
                    head_block_id:
                      "$ref": "#/paths/~1producer~1get_integrity_hash/post/responses/200/content/application~1json/schema/properties/head_block_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: void
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/create_snapshot" \
              -H "Content-Type: application/json" \
              -d '{
                "next": {
                  "snapshot_name": "my-snapshot",
                  "head_block_id": "ABCDEF123456..."
                }
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const payload = {
              next: {
                snapshot_name: "my-snapshot",
                head_block_id: "ABCDEF123456..."
              }
            };

            fetch("http://localhost:8887/v1/producer/create_snapshot", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/create_snapshot"
            payload = {
              "next": {
                "snapshot_name": "my-snapshot",
                "head_block_id": "ABCDEF123456..."
              }
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/get_integrity_hash":
    post:
      summary: get_integrity_hash
      description: Retreives the integrity hash for producer node
      operationId: get_integrity_hash
      parameters: []
      requestBody:
        content:
          application/json:
            example: {}
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Defines the integrity hash information details
                properties:
                  integrity_hash:
                    "$ref": "#/paths/~1producer~1get_integrity_hash/post/responses/200/content/application~1json/schema/properties/head_block_id"
                  head_block_id:
                    type: string
                    pattern: "^[0-9A-Fa-f]{64}$"
                    title: Sha256
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/get_integrity_hash" \
              -H "Content-Type: application/json" \
              -d '{}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            fetch("http://localhost:8887/v1/producer/get_integrity_hash", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({})
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/get_integrity_hash"
            payload = {}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/schedule_protocol_feature_activations":
    post:
      summary: schedule_protocol_feature_activations
      description: Schedule protocol feature activation for producer node
      operationId: schedule_protocol_feature_activations
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              schedule:
                protocol_features_to_activate:
                  - "ABCDEF123456..."
            schema:
              type: object
              required:
                - schedule
              properties:
                schedule:
                  type: object
                  properties:
                    protocol_features_to_activate:
                      type: array
                      description: List of protocol features to activate
                      items:
                        "$ref": "#/paths/~1producer~1get_integrity_hash/post/responses/200/content/application~1json/schema/properties/head_block_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: void
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/schedule_protocol_feature_activations" \
              -H "Content-Type: application/json" \
              -d '{
                "schedule": {
                  "protocol_features_to_activate": ["ABCDEF123456..."]
                }
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const payload = {
              schedule: {
                protocol_features_to_activate: ["ABCDEF123456..."]
              }
            };

            fetch("http://localhost:8887/v1/producer/schedule_protocol_feature_activations", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/schedule_protocol_feature_activations"
            payload = {
              "schedule": {
                "protocol_features_to_activate": ["ABCDEF123456..."]
              }
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/producer/get_supported_protocol_features":
    post:
      summary: get_supported_protocol_features
      description: Retreives supported protocol features for producer node
      operationId: get_supported_protocol_features
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              params:
                exclude_disabled: false
                exclude_unactivatable: false
            schema:
              type: object
              required:
                - params
              properties:
                params:
                  type: object
                  description: Defines filters based on which to return the supported protocol features
                  properties:
                    exclude_disabled:
                      type: boolean
                      description: Exclude disabled protocol features
                    exclude_unactivatable:
                      type: boolean
                      description: Exclude unactivatable protocol features
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Variant type, an array of strings with the supported protocol features
                items:
                  type: string
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8887/v1/producer/get_supported_protocol_features" \
              -H "Content-Type: application/json" \
              -d '{
                "params": {
                  "exclude_disabled": false,
                  "exclude_unactivatable": false
                }
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const payload = {
              params: {
                exclude_disabled: false,
                exclude_unactivatable: false
              }
            };

            fetch("http://localhost:8887/v1/producer/get_supported_protocol_features", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8887/v1/producer/get_supported_protocol_features"
            payload = {
              "params": {
                "exclude_disabled": False,
                "exclude_unactivatable": False
              }
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)
