openapi: 3.0.0
info:
  title: Trace API
  description: >-
    Nodeop Trace API Specification. See developer documentation at
    https://docs.wire.network/docs/api-reference/tooling/nodeop/plugins/trace-api-plugin
    for information on enabling this plugin.
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    url: https://wire.network
servers:
  - url: '{protocol}://{host}:{port}/v1/'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        default: '8080'
components:
  schemas: {}
security:
  - {}
paths:
  /trace_api/get_block:
    post:
      summary: get block
      description: >-
        Returns a block trace object containing retired actions and related
        metadata.
      operationId: get_block
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - block_num
              properties:
                block_num:
                  type: integer
                  description: Provide a `block number`
      responses:
        '200':
          description: OK - valid response payload
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: refs/BlockTraceV0.yaml
                  - $ref: refs/BlockTraceV1.yaml
                  - $ref: refs/BlockTraceV2.yaml
        '400':
          description: >-
            Error - requested block number is invalid (not a number, larger than
            max int)
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: bad or missing block_num
                  error:
                    $ref: '#/component/schema/ERROR_DETAILS'
        '404':
          description: Error - requested data not present on node
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: bad or missing block_num
                  error:
                    $ref: '#/component/schema/ERROR_DETAILS'
        '500':
          description: >-
            Error - exceptional condition while processing get_block; e.g.
            corrupt files
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: >-
                      Trace API encountered an Error which it cannot recover
                      from.  Please resolve the error and relaunch the process
                  error:
                    $ref: '#/component/schema/ERROR_DETAILS'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/trace_api/get_block \
                 --header 'accept: application/json' \
                 --header 'content-type: application/json'
        - lang: Node
          label: Node.js
          source: |-
            const url = 'http://localhost:8080/v1/trace_api/get_block';
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };

            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/trace_api/get_block"

            headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: |-
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };

            fetch('http://localhost:8080/v1/trace_api/get_block', options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
  /trace_api/get_transaction_trace:
    post:
      summary: transaction trace
      description: Does a scan of the trace files looking for the transaction
      optionationId: get_transaction_trace
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  description: Proviade a transaction id
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: refs/TransactionTraceV0.yaml
                  - $ref: refs/TransactionTraceV1.yaml
                  - $ref: refs/TransactionTraceV2.yaml
                  - $ref: refs/TransactionTraceV3.yaml
        '400':
          description: >-
            Error - requested block number is invalid (not a number, larger than
            max int)
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: bad or missing block_num
                  error:
                    $ref: '#/component/schema/ERROR_DETAILS'
        '404':
          description: Error - requested data not present on node
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: bad or missing block_num
                  error:
                    $ref: '#/component/schema/ERROR_DETAILS'
        '500':
          description: >-
            Error - exceptional condition while processing get_block; e.g.
            corrupt files
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: >-
                      Trace API encountered an Error which it cannot recover
                      from.  Please resolve the error and relaunch the process
                  error:
                    $ref: '#/component/schema/ERROR_DETAILS'
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |-
            curl --request POST \
                 --url http://localhost:8080/v1/trace_api/get_transaction_trace \
                 --header 'accept: application/json' \
                 --header 'content-type: application/json'
        - lang: Node
          label: Node.js
          source: >-
            const url =
            'http://localhost:8080/v1/trace_api/get_transaction_trace';

            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch(url, options)
              .then(res => res.json())
              .then(json => console.log(json))
              .catch(err => console.error(err));
        - lang: Python
          label: Python
          source: |-
            import requests

            url = "http://localhost:8080/v1/trace_api/get_transaction_trace"

            headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }

            response = requests.post(url, headers=headers)

            print(response.text)
        - lang: Javascript
          label: Javascript
          source: >-
            const options = {
              method: 'POST',
              headers: {accept: 'application/json', 'content-type': 'application/json'}
            };


            fetch('http://localhost:8080/v1/trace_api/get_transaction_trace',
            options)
              .then(res => res.json())
              .then(res => console.log(res))
              .catch(err => console.error(err));
component:
  schema:
    TRACE:
      type: object
      properties:
        global_squence:
          type: integer
          example: 669
        receiver:
          type: string
          example: myproducer
        account:
          type: string
          example: esio.token
        action:
          type: string
          example: transfer
        authorization:
          type: array
          items:
            type: object
            properties:
              account:
                type: string
                example: myaccount
              permission:
                type: string
                example: active
        data:
          type: string
          $ref: refs/Sha256.yaml
        return_value:
          type: string
          example: ''
        params:
          type: object
          properties:
            from:
              type: string
              example: sysio
            to:
              type: string
              example: myproducer
            quantity:
              type: string
              example: 10.000 SYS
            memo:
              type: string
              example: first transfer
    ERROR_DETAILS:
      type: object
      properties:
        code:
          type: integer
          example: 0
        name:
          type: string
        what:
          type: string
        details:
          type: array
        items:
          type: string
