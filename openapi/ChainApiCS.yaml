openapi: 3.0.0
info:
  title: Chain API
  description: >-
    Nodeop Chain API Specification. See developer documentation at
    https://docs.wire.network/docs/api-reference/tooling/nodeop/plugins/chain-plugin
    for information on enabling this plugin.
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    url: https://wire.network

servers:
  - url: "{protocol}://{host}:{port}/v1/chain"
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        default: "8888"

components:
  schemas: {}

paths:
  "/get_account":
    post:
      description: Returns an object containing various details about a specific account on the blockchain.
      operationId: get_account
      requestBody:
        description: JSON Object with single member "account_name"
        content:
          application/json:
            example:
              account_name: "sysio.token"
            schema:
              type: object
              required:
                - account_name
              properties:
                account_name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  account_name:
                    type: string
                    example: "sysio.token"
                  head_block_num:
                    type: integer
                    example: 181701
                  head_block_time:
                    type: string
                    format: date-time
                    example: "2025-02-07T18:50:13.000"
                  privileged:
                    type: boolean
                    example: false
                  last_code_update:
                    type: string
                    format: date-time
                    example: "2025-02-06T17:24:01.000"
                  created:
                    type: string
                    format: date-time
                    example: "2025-02-06T17:24:00.500"
                  ram_quota:
                    type: integer
                    example: -1
                  net_weight:
                    type: integer
                    example: -1
                  cpu_weight:
                    type: integer
                    example: -1
                  net_limit:
                    type: object
                    properties:
                      used:
                        type: integer
                        example: -1
                      available:
                        type: integer
                        example: -1
                      max:
                        type: integer
                        example: -1
                  cpu_limit:
                    type: object
                    properties:
                      used:
                        type: integer
                        example: -1
                      available:
                        type: integer
                        example: -1
                      max:
                        type: integer
                        example: -1
                  ram_usage:
                    type: integer
                    example: 504
                  permissions:
                    type: array
                    items:
                      type: object
                      properties:
                        perm_name:
                          type: string
                          example: "active"
                        parent:
                          type: string
                          example: "owner"
                        required_auth:
                          type: object
                          properties:
                            threshold:
                              type: integer
                              example: 1
                            keys:
                              type: array
                              items:
                                type: object
                                properties:
                                  key:
                                    type: string
                                    example: "SYS7wdrtpDM1yEbL8XT3JS4rCLu6rb3BTQWpt62vzgqtoeTt2V2zs"
                                  weight:
                                    type: integer
                                    example: 1
                            accounts:
                              type: array
                              items:
                                type: object
                            waits:
                              type: array
                              items:
                                type: object
                  subjective_cpu_bill_limit:
                    type: object
                    properties:
                      used:
                        type: integer
                        example: 0
                      available:
                        type: integer
                        example: 0
                      max:
                        type: integer
                        example: 0
              examples:
                ExampleResponse:
                  summary: Sample Response for Get Account
                  value:
                    account_name: "sysio.token"
                    head_block_num: 181701
                    head_block_time: "2025-02-07T18:50:13.000"
                    privileged: false
                    last_code_update: "2025-02-06T17:24:01.000"
                    created: "2025-02-06T17:24:00.500"
                    ram_quota: -1
                    net_weight: -1
                    cpu_weight: -1
                    net_limit: { used: -1, available: -1, max: -1 }
                    cpu_limit: { used: -1, available: -1, max: -1 }
                    ram_usage: 504
                    permissions: [ { perm_name: "active", parent: "owner", required_auth: { threshold: 1, keys: [ { key: "SYS7wdrtpDM1yEbL8XT3JS4rCLu6rb3BTQWpt62vzgqtoeTt2V2zs", weight: 1 } ], accounts: [], waits: [] } } ]
                    subjective_cpu_bill_limit: { used: 0, available: 0, max: 0 }
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_account" \
              -H "Content-Type: application/json" \
              -d '{"account_name": "sysio.token"}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');
            fetch("http://localhost:8888/v1/chain/get_account", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ account_name: "sysio.token" })
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests
            url = "http://localhost:8888/v1/chain/get_account"
            payload = {"account_name": "sysio.token"}
            headers = {"Content-Type": "application/json"}
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  "/get_block":
    post:
      description: Returns an object containing various details about a specific block on the blockchain.
      operationId: get_block
      requestBody:
        content:
          application/json:
            example:
              block_num_or_id: "234"
            schema:
              type: object
              required:
                - block_num_or_id
              properties:
                block_num_or_id:
                  type: string
                  description: Provide a `block number` or a `block id`
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-02-06T17:25:42.000"
                  producer:
                    type: string
                    example: "sysio"
                  confirmed:
                    type: integer
                    example: 0
                  previous:
                    type: string
                    example: "000000e989ae687b45c95ef25ee42efe8b283690e97ca9694b78e0a0d7d2dcff"
                  transaction_mroot:
                    type: string
                    example: "0000000000000000000000000000000000000000000000000000000000000000"
                  action_mroot:
                    type: string
                    example: "7957f5ea86130b6c2f8e442f3a549ebfe744c788ed9d77108738350bd31b2327"
                  schedule_version:
                    type: integer
                    example: 0
                  new_producers:
                    type: string
                    nullable: true
                    example: null
                  producer_signature:
                    type: string
                    example: "SIG_K1_KbMeciZ5vQ9BDLHusX9Mj9YWUBmGKxg5k8s5jnML3o9ftac55vk7p3oZYABQjeZMBb983gPYyKQvoc18sExP9EftRJQX6z"
                  transactions:
                    type: array
                    items:
                      type: object
                    example: []
                  id:
                    type: string
                    example: "000000eaa7707d77cec76eda35a3a66c69273bd706d25cd950aa9811a6752152"
                  block_num:
                    type: integer
                    example: 234
                  ref_block_prefix:
                    type: integer
                    example: 3664693198
              examples:
                ExampleResponse:
                  summary: Sample Response for Get Block
                  value:
                    timestamp: "2025-02-06T17:25:42.000"
                    producer: "sysio"
                    confirmed: 0
                    previous: "000000e989ae687b45c95ef25ee42efe8b283690e97ca9694b78e0a0d7d2dcff"
                    transaction_mroot: "0000000000000000000000000000000000000000000000000000000000000000"
                    action_mroot: "7957f5ea86130b6c2f8e442f3a549ebfe744c788ed9d77108738350bd31b2327"
                    schedule_version: 0
                    new_producers: null
                    producer_signature: "SIG_K1_KbMeciZ5vQ9BDLHusX9Mj9YWUBmGKxg5k8s5jnML3o9ftac55vk7p3oZYABQjeZMBb983gPYyKQvoc18sExP9EftRJQX6z"
                    transactions: []
                    id: "000000eaa7707d77cec76eda35a3a66c69273bd706d25cd950aa9811a6752152"
                    block_num: 234
                    ref_block_prefix: 3664693198
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_block" \
              -H "Content-Type: application/json" \
              -d '{"block_num_or_id": "234"}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');
            fetch("http://localhost:8888/v1/chain/get_block", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ block_num_or_id: "234" })
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests
            url = "http://localhost:8888/v1/chain/get_block"
            payload = {"block_num_or_id": "234"}
            headers = {"Content-Type": "application/json"}
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  "/get_info":
    post:
      summary: get_info
      description: Returns an object containing various details about the blockchain.
      operationId: get_info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Info
                type: object
                properties:
                  server_version:
                    type: string
                    example: "8903fb39"
                  chain_id:
                    type: string
                    example: "b6de5b756bf858001a6c321b228cdb378dba0c6eebe9822af92e5478d75f26a8"
                  head_block_num:
                    type: integer
                    example: 177352
                  last_irreversible_block_num:
                    type: integer
                    example: 177351
                  last_irreversible_block_id:
                    type: string
                    example: "0002b4c7e186506709284e7698d02cc071130b67504e8ad1a7fbe5fa6d8e9708"
                  head_block_id:
                    type: string
                    example: "0002b4c836b29fb762ca922b8b885bf12a5f02991989e47020cd98af8252fb11"
                  head_block_time:
                    type: string
                    format: date-time
                    example: "2025-02-07T18:13:58.500"
                  head_block_producer:
                    type: string
                    example: "sysio"
                  virtual_block_cpu_limit:
                    type: integer
                    example: 100000000
                  virtual_block_net_limit:
                    type: integer
                    example: 1048576000
                  block_cpu_limit:
                    type: integer
                    example: 99900
                  block_net_limit:
                    type: integer
                    example: 1048576
                  server_version_string:
                    type: string
                    example: "v3.1.6"
                  fork_db_head_block_num:
                    type: integer
                    example: 177352
                  fork_db_head_block_id:
                    type: string
                    example: "0002b4c836b29fb762ca922b8b885bf12a5f02991989e47020cd98af8252fb11"
                  server_full_version_string:
                    type: string
                    example: "v3.1.6-8903fb39ab64c984aa2489b5546316a4ce4128d1"
                  total_cpu_weight:
                    type: integer
                    example: 0
                  total_net_weight:
                    type: integer
                    example: 0
                  earliest_available_block_num:
                    type: integer
                    example: 1
                  last_irreversible_block_time:
                    type: string
                    format: date-time
                    example: "2025-02-07T18:13:58.000"
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8080/v1/chain/get_info"
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');
            fetch("http://localhost:8080/v1/chain/get_info", {
              method: "POST"
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests
            url = "http://localhost:8080/v1/chain/get_info"
            response = requests.post(url)
            print(response.text)
  "/push_transaction":
    post:
      description: Attempts to apply a single transaction to the blockchain.
      operationId: push_transaction
      requestBody:
        content:
          application/json:
            example:
              signatures: ["SIG_K1_xyz..."]
              compression: false
              packed_context_free_data: ""
              packed_trx: "abcdef1234..."
            schema:
              type: object
              properties:
                signatures:
                  type: array
                  items:
                    type: string
                    pattern: "^SIG_([RK]1|WA)_[1-9A-HJ-NP-Za-km-z]+$"
                  description: array of signatures required to authorize transaction
                compression:
                  type: boolean
                  description: Compression used, usually false
                packed_context_free_data:
                  type: string
                  description: json to hex
                packed_trx:
                  type: string
                  description: Transaction object json to hex
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns Nothing
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/push_transaction" \
              -H "Content-Type: application/json" \
              -d '{
                "signatures": ["SIG_K1_xyz..."],
                "compression": false,
                "packed_context_free_data": "",
                "packed_trx": "abcdef1234..."
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              signatures: ["SIG_K1_xyz..."],
              compression: false,
              packed_context_free_data: "",
              packed_trx: "abcdef1234..."
            };

            fetch("http://localhost:8888/v1/chain/push_transaction", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/push_transaction"
            payload = {
              "signatures": ["SIG_K1_xyz..."],
              "compression": False,
              "packed_context_free_data": "",
              "packed_trx": "abcdef1234..."
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/send_transaction":
    post:
      description: Similar to push_transaction, but uses a separate code path.
      operationId: send_transaction
      requestBody:
        content:
          application/json:
            example:
              signatures: ["SIG_K1_abc..."]
              compression: false
              packed_context_free_data: ""
              packed_trx: "1234abcd..."
            schema:
              type: object
              properties:
                signatures:
                  type: array
                  items:
                    "$ref": "#/paths/~1push_transaction/post/requestBody/content/application~1json/schema/properties/signatures/items"
                compression:
                  type: boolean
                packed_context_free_data:
                  type: string
                packed_trx:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns Nothing
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/send_transaction" \
              -H "Content-Type: application/json" \
              -d '{
                "signatures": ["SIG_K1_abc..."],
                "compression": false,
                "packed_context_free_data": "",
                "packed_trx": "1234abcd..."
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              signatures: ["SIG_K1_abc..."],
              compression: false,
              packed_context_free_data: "",
              packed_trx: "1234abcd..."
            };

            fetch("http://localhost:8888/v1/chain/send_transaction", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/send_transaction"
            payload = {
              "signatures": ["SIG_K1_abc..."],
              "compression": False,
              "packed_context_free_data": "",
              "packed_trx": "1234abcd..."
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/push_transactions":
    post:
      description: This method expects an array of transaction objects, applying each to the blockchain.
      operationId: push_transactions
      requestBody:
        content:
          application/json:
            example:
              - expiration: "2025-12-31T23:59:59"
                ref_block_num: 12345
                ref_block_prefix: 54321
                max_net_usage_words: "0"
                max_cpu_usage_ms: "0"
                delay_sec: 0
                context_free_actions: []
                actions:
                  - account: "someacc"
                    name: "dosomething"
                    authorization: ["someactor"]
                    data: {}
                    hex_data: "abcd1234"
                transaction_extensions: []
            schema:
              type: array
              items:
                type: object
                title: Transaction
                # (Schema details omitted)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns Nothing
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/push_transactions" \
              -H "Content-Type: application/json" \
              -d '[
                {
                  "expiration": "2025-12-31T23:59:59",
                  "ref_block_num": 12345,
                  "ref_block_prefix": 54321,
                  "max_net_usage_words": "0",
                  "max_cpu_usage_ms": "0",
                  "delay_sec": 0,
                  "context_free_actions": [],
                  "actions": [
                    {
                      "account": "someacc",
                      "name": "dosomething",
                      "authorization": ["someactor"],
                      "data": {},
                      "hex_data": "abcd1234"
                    }
                  ],
                  "transaction_extensions": []
                }
              ]'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const txArray = [
              {
                expiration: "2025-12-31T23:59:59",
                ref_block_num: 12345,
                ref_block_prefix: 54321,
                max_net_usage_words: "0",
                max_cpu_usage_ms: "0",
                delay_sec: 0,
                context_free_actions: [],
                actions: [
                  {
                    account: "someacc",
                    name: "dosomething",
                    authorization: ["someactor"],
                    data: {},
                    hex_data: "abcd1234"
                  }
                ],
                transaction_extensions: []
              }
            ];

            fetch("http://localhost:8888/v1/chain/push_transactions", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(txArray)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/push_transactions"
            payload = [
              {
                "expiration": "2025-12-31T23:59:59",
                "ref_block_num": 12345,
                "ref_block_prefix": 54321,
                "max_net_usage_words": "0",
                "max_cpu_usage_ms": "0",
                "delay_sec": 0,
                "context_free_actions": [],
                "actions": [
                  {
                    "account": "someacc",
                    "name": "dosomething",
                    "authorization": ["someactor"],
                    "data": {},
                    "hex_data": "abcd1234"
                  }
                ],
                "transaction_extensions": []
              }
            ]
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_block_header_state":
    post:
      description: Retrieves the block header state.
      operationId: get_block_header_state
      requestBody:
        content:
          application/json:
            example:
              block_num_or_id: "234"
            schema:
              type: object
              required:
                - block_num_or_id
              properties:
                block_num_or_id:
                  type: string
                  description: Provide a block_number or a block_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: BlockHeaderState
                # (Schema details omitted)
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_block_header_state" \
              -H "Content-Type: application/json" \
              -d '{"block_num_or_id": "234"}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');
            
            const body = { block_num_or_id: "234" };

            fetch("http://localhost:8888/v1/chain/get_block_header_state", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/get_block_header_state"
            payload = {"block_num_or_id": "234"}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_abi":
    post:
      description: Retrieves the ABI for a contract based on its account name.
      operationId: get_abi
      requestBody:
        content:
          application/json:
            example:
              account_name: "sysio.token"
            schema:
              type: object
              required:
                - account_name
              properties:
                account_name:
                  type: string
                  description: Account name of the contract.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  account_name:
                    type: string
                    example: "sysio.token"
                  abi:
                    type: object
                    properties:
                      version:
                        type: string
                        example: "sysio::abi/1.2"
                      structs:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: "account"
                            base:
                              type: string
                              example: ""
                            fields:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                    example: "balance"
                                  type:
                                    type: string
                                    example: "asset"
                      actions:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: "transfer"
                            type:
                              type: string
                              example: "transfer"
                            ricardian_contract:
                              type: string
                              example: "Send {{quantity}} from {{from}} to {{to}}."
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_abi" \
              -H "Content-Type: application/json" \
              -d '{"account_name": "sysio.token"}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');
            fetch("http://localhost:8888/v1/chain/get_abi", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ account_name: "sysio.token" })
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests
            url = "http://localhost:8888/v1/chain/get_abi"
            payload = {"account_name": "sysio.token"}
            headers = {"Content-Type": "application/json"}
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  "/get_currency_balance":
    post:
      description: Retrieves the current balance of a specific account and token symbol.
      operationId: get_currency_balance
      requestBody:
        content:
          application/json:
            example:
              code: "sysio.token"
              account: "sysio"
              symbol: "SYS"
            schema:
              type: object
              required:
                - code
                - account
                - symbol
              properties:
                code:
                  type: string
                  description: Token contract account.
                  example: "sysio.token"
                account:
                  type: string
                  description: Account name to check balance for.
                  example: "sysio"
                symbol:
                  type: string
                  description: Token symbol.
                  example: "SYS"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "75496.0000 SYS"
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_currency_balance" \
              -H "Content-Type: application/json" \
              -d '{"code": "sysio.token", "account": "sysio", "symbol": "SYS"}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');
            fetch("http://localhost:8888/v1/chain/get_currency_balance", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ code: "sysio.token", account: "sysio", symbol: "SYS" })
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests
            url = "http://localhost:8888/v1/chain/get_currency_balance"
            payload = {"code": "sysio.token", "account": "sysio", "symbol": "SYS"}
            headers = {"Content-Type": "application/json"}
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  "/get_currency_stats":
      post:
        description: Retrieves currency stats
        operationId: get_currency_stats
        requestBody:
          content:
            application/json:
              example:
                code: "sysio.token"
                symbol: "SYS"
              schema:
                type: object
                properties:
                  code:
                    "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
                  symbol:
                    "$ref": "#/paths/~1get_currency_balance/post/responses/200/content/application~1json/schema/items"
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    [symbol]:
                      type: object
                      properties:
                        supply:
                          type: string
                        max_supply:
                          type: string
                        issuer:
                          type: string
                  example:
                      SYS:
                        supply: "75496.0000 SYS"
                        max_supply: "75496.0000 SYS"
                        issuer: "sysio"
        x-codeSamples:
          - lang: Shell
            label: Shell
            source: |
              curl -X POST "http://localhost:8888/v1/chain/get_currency_stats" \
                -H "Content-Type: application/json" \
                -d '{"code": "sysio.token", "symbol": "SYS"}'
          - lang: Node.js
            label: Node.js
            source: |
              const fetch = require('node-fetch');

              const body = { code: "sysio.token", symbol: "SYS" };

              fetch("http://localhost:8888/v1/chain/get_currency_stats", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(body)
              })
                .then(res => res.json())
                .then(console.log)
                .catch(console.error);
          - lang: Python
            label: Python
            source: |
              import requests

              url = "http://localhost:8888/v1/chain/get_currency_stats"
              payload = {
                "code": "sysio.token",
                "symbol": "SYS"
              }
              headers = {"Content-Type": "application/json"}

              response = requests.post(url, json=payload, headers=headers)
              print(response.text)
  "/get_required_keys":
    post:
      description: Returns the required keys needed to sign a transaction.
      operationId: get_required_keys
      requestBody:
        content:
          application/json:
            example:
              transaction:
                expiration: "2025-12-31T23:59:59"
                ref_block_num: 123
                ref_block_prefix: 456
                max_net_usage_words: "0"
                max_cpu_usage_ms: "0"
                delay_sec: 0
                context_free_actions: []
                actions: []
              available_keys:
                - "PUB_K1_abc..."
            schema:
              type: object
              required:
                - transaction
                - available_keys
              properties:
                transaction:
                  "$ref": "#/paths/~1push_transactions/post/requestBody/content/application~1json/schema/items"
                available_keys:
                  type: array
                  items:
                    type: string
                    pattern: "^(SYS|PUB_([RK]1|WA)_)[1-9A-HJ-NP-Za-km-z]+$"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {}
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_required_keys" \
              -H "Content-Type: application/json" \
              -d '{
                "transaction": {
                  "expiration": "2025-12-31T23:59:59",
                  "ref_block_num": 123,
                  "ref_block_prefix": 456,
                  "max_net_usage_words": "0",
                  "max_cpu_usage_ms": "0",
                  "delay_sec": 0,
                  "context_free_actions": [],
                  "actions": []
                },
                "available_keys": ["PUB_K1_abc..."]
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              transaction: {
                expiration: "2025-12-31T23:59:59",
                ref_block_num: 123,
                ref_block_prefix: 456,
                max_net_usage_words: "0",
                max_cpu_usage_ms: "0",
                delay_sec: 0,
                context_free_actions: [],
                actions: []
              },
              available_keys: ["PUB_K1_abc..."]
            };

            fetch("http://localhost:8888/v1/chain/get_required_keys", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/get_required_keys"
            payload = {
              "transaction": {
                "expiration": "2025-12-31T23:59:59",
                "ref_block_num": 123,
                "ref_block_prefix": 456,
                "max_net_usage_words": "0",
                "max_cpu_usage_ms": "0",
                "delay_sec": 0,
                "context_free_actions": [],
                "actions": []
              },
              "available_keys": ["PUB_K1_abc..."]
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_producers":
    post:
      description: Retrieves producers list
      operationId: get_producers
      requestBody:
        content:
          application/json:
            example:
              limit: "10"
              lower_bound: "0"
              json: true
            schema:
              title: GetProducersRequest
              type: object
              required:
                - limit
                - lower_bound
              properties:
                limit:
                  type: string
                  description: total number of producers to retrieve
                lower_bound:
                  type: string
                  description: pagination lower bound
                json:
                  type: boolean
                  description: return result in JSON format
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: GetProducersResponse
                type: object
                # (Schema details omitted)
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_producers" \
              -H "Content-Type: application/json" \
              -d '{"limit": "10", "lower_bound": "0", "json": true}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              limit: "10",
              lower_bound: "0",
              json: true
            };

            fetch("http://localhost:8888/v1/chain/get_producers", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/get_producers"
            payload = {
              "limit": "10",
              "lower_bound": "0",
              "json": True
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_raw_code_and_abi":
    post:
      description: Retrieves raw code and ABI for a contract based on account name
      operationId: get_raw_code_and_abi
      requestBody:
        content:
          application/json:
            example:
              account_name: "somecontract"
            schema:
              type: object
              required:
                - account_name
              properties:
                account_name:
                  "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                # (Details omitted)
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_raw_code_and_abi" \
              -H "Content-Type: application/json" \
              -d '{"account_name": "somecontract"}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = { account_name: "somecontract" };

            fetch("http://localhost:8888/v1/chain/get_raw_code_and_abi", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/get_raw_code_and_abi"
            payload = {"account_name": "somecontract"}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_scheduled_transaction":
    post:
      description: Retrieves the scheduled transaction
      operationId: get_scheduled_transaction
      requestBody:
        content:
          application/json:
            example:
              lower_bound: "2025-12-31T12:34:56.789"
              limit: 10
              json: false
            schema:
              type: object
              properties:
                lower_bound:
                  type: string
                  pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}$"
                limit:
                  type: integer
                json:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_scheduled_transaction" \
              -H "Content-Type: application/json" \
              -d '{
                "lower_bound": "2025-12-31T12:34:56.789",
                "limit": 10,
                "json": false
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              lower_bound: "2025-12-31T12:34:56.789",
              limit: 10,
              json: false
            };

            fetch("http://localhost:8888/v1/chain/get_scheduled_transaction", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/get_scheduled_transaction"
            payload = {
              "lower_bound": "2025-12-31T12:34:56.789",
              "limit": 10,
              "json": False
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_table_by_scope":
    post:
      summary: get_table_by_scope
      description: Retrieves table scope for a given contract and table name.
      operationId: get_table_by_scope
      requestBody:
        content:
          application/json:
            example:
              code: "sysio.token"
              table: "accounts"
              lower_bound: ""
              upper_bound: ""
              limit: 10
              reverse: false
              show_payer: false
            schema:
              type: object
              required:
                - code
                - table
              properties:
                code:
                  type: string
                table:
                  type: string
                lower_bound:
                  type: string
                upper_bound:
                  type: string
                limit:
                  type: integer
                  default: 10
                reverse:
                  type: boolean
                  default: false
                show_payer:
                  type: boolean
                  default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: "sysio.token"
                        scope:
                          type: string
                          example: "sysio"
                        table:
                          type: string
                          example: "accounts"
                        payer:
                          type: string
                          example: "sysio"
                        count:
                          type: integer
                          example: 1
                  more:
                    type: string
                    example: ""
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_table_by_scope" \
              -H "Content-Type: application/json" \
              -d '{
                "code": "sysio.token",
                "table": "accounts",
                "lower_bound": "",
                "upper_bound": "",
                "limit": 10,
                "reverse": false,
                "show_payer": false
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');
            const body = {
              code: "sysio.token",
              table: "accounts",
              lower_bound: "",
              upper_bound: "",
              limit: 10,
              reverse: false,
              show_payer: false
            };
            fetch("http://localhost:8888/v1/chain/get_table_by_scope", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests
            url = "http://localhost:8888/v1/chain/get_table_by_scope"
            payload = {
              "code": "sysio.token",
              "table": "accounts",
              "lower_bound": "",
              "upper_bound": "",
              "limit": 10,
              "reverse": False,
              "show_payer": False
            }
            headers = {"Content-Type": "application/json"}
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())
  "/get_table_rows":
    post:
      summary: get_table_rows
      description: Returns rows from the specified table.
      operationId: get_table_rows
      requestBody:
        content:
          application/json:
            example:
              code: "sysio.token"
              table: "accounts"
              scope: "sysio"
              index_position: "primary"
              key_type: "name"
              encode_type: "dec"
              lower_bound: ""
              upper_bound: ""
              limit: 10
              reverse: false
              show_payer: false
            schema:
              type: object
              required:
                - code
                - table
                - scope
              properties:
                code:
                  type: string
                table:
                  type: string
                scope:
                  type: string
                index_position:
                  type: string
                  description: e.g. "primary", "secondary", etc.
                key_type:
                  type: string
                encode_type:
                  type: string
                lower_bound:
                  type: string
                upper_bound:
                  type: string
                limit:
                  type: integer
                  default: 10
                reverse:
                  type: boolean
                  default: false
                show_payer:
                  type: boolean
                  default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      type: string
                    example: ["80c6ff2c000000000453595300000000"]
                  more:
                    type: boolean
                    example: false
                  next_key:
                    type: string
                    example: ""
              examples:
                ExampleResponse:
                  summary: Sample Response for Get Table Rows
                  value:
                    rows: ["80c6ff2c000000000453595300000000"]
                    more: false
                    next_key: ""
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_table_rows" \
              -H "Content-Type: application/json" \
              -d '{
                "code": "sysio.token",
                "table": "accounts",
                "scope": "sysio",
                "index_position": "primary",
                "key_type": "name",
                "encode_type": "dec",
                "lower_bound": "",
                "upper_bound": "",
                "limit": 10,
                "reverse": false,
                "show_payer": false
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');
            const body = {
              code: "sysio.token",
              table: "accounts",
              scope: "sysio",
              index_position: "primary",
              key_type: "name",
              encode_type: "dec",
              lower_bound: "",
              upper_bound: "",
              limit: 10,
              reverse: false,
              show_payer: false
            };
            fetch("http://localhost:8888/v1/chain/get_table_rows", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests
            url = "http://localhost:8888/v1/chain/get_table_rows"
            payload = {
              "code": "sysio.token",
              "table": "accounts",
              "scope": "sysio",
              "index_position": "primary",
              "key_type": "name",
              "encode_type": "dec",
              "lower_bound": "",
              "upper_bound": "",
              "limit": 10,
              "reverse": False,
              "show_payer": False
            }
            headers = {"Content-Type": "application/json"}
            response = requests.post(url, json=payload, headers=headers)
            print(response.json())

  "/abi_json_to_bin":
    post:
      description: Returns serialized action data.
      operationId: abi_json_to_bin
      requestBody:
        content:
          application/json:
            example:
              code: "sysio.token"
              action: "transfer"
              args:
                param1: "value1"
            schema:
              type: object
              title: AbiJsonToBinRequest
              properties:
                code:
                  "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
                action:
                  "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
                args:
                  type: object
                  description: The action parameters to be serialized
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  binargs:
                    "$ref": "#/paths/~1abi_bin_to_json/post/requestBody/content/application~1json/schema/properties/binargs"
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/abi_json_to_bin" \
              -H "Content-Type: application/json" \
              -d '{
                "code": "sysio.token",
                "action": "transfer",
                "args": { "param1": "value1" }
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              code: "sysio.token",
              action: "transfer",
              args: { param1: "value1" }
            };

            fetch("http://localhost:8888/v1/chain/abi_json_to_bin", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/abi_json_to_bin"
            payload = {
              "code": "sysio.token",
              "action": "transfer",
              "args": {
                "param1": "value1"
              }
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/abi_bin_to_json":
    post:
      description: Returns deserialized action data.
      operationId: abi_bin_to_json
      requestBody:
        content:
          application/json:
            example:
              code: "somecontract"
              action: "someaction"
              binargs: "deadbeef"
            schema:
              type: object
              title: AbiBinToJsonRequest
              required:
                - code
                - action
                - binargs
              properties:
                code:
                  "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
                action:
                  "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
                binargs:
                  type: string
                  pattern: "^(0[xX])?[0-9a-fA-F]*$"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/abi_bin_to_json" \
              -H "Content-Type: application/json" \
              -d '{
                "code": "somecontract",
                "action": "someaction",
                "binargs": "deadbeef"
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              code: "somecontract",
              action: "someaction",
              binargs: "deadbeef"
            };

            fetch("http://localhost:8888/v1/chain/abi_bin_to_json", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.text())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/abi_bin_to_json"
            payload = {
              "code": "somecontract",
              "action": "someaction",
              "binargs": "deadbeef"
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_code":
    post:
      description: Returns an object containing the smart contract WASM code.
      operationId: get_code
      requestBody:
        content:
          application/json:
            example:
              account_name: "somecontract"
              code_as_wasm: 1
            schema:
              type: object
              required:
                - account_name
                - code_as_wasm
              properties:
                account_name:
                  "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
                code_as_wasm:
                  type: integer
                  default: 1
                  description: This must be 1 (true)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: GetCodeResponse.yaml
                type: object
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_code" \
              -H "Content-Type: application/json" \
              -d '{"account_name": "somecontract", "code_as_wasm": 1}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              account_name: "somecontract",
              code_as_wasm: 1
            };

            fetch("http://localhost:8888/v1/chain/get_code", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/get_code"
            payload = {
              "account_name": "somecontract",
              "code_as_wasm": 1
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_raw_abi":
    post:
      description: Returns an object containing the smart contract abi.
      operationId: get_raw_abi
      requestBody:
        content:
          application/json:
            example:
              account_name: "somecontract"
            schema:
              type: object
              required:
                - account_name
              properties:
                account_name:
                  "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_raw_abi" \
              -H "Content-Type: application/json" \
              -d '{"account_name": "somecontract"}'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = { account_name: "somecontract" };

            fetch("http://localhost:8888/v1/chain/get_raw_abi", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/get_raw_abi"
            payload = {"account_name": "somecontract"}
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_activated_protocol_features":
    post:
      description: Retrieves the activated protocol features for producer node
      operationId: get_activated_protocol_features
      requestBody:
        content:
          application/json:
            example:
              params:
                lower_bound: 0
                upper_bound: 100
                limit: 10
                search_by_block_num: true
                reverse: false
            schema:
              type: object
              required:
                - params
              properties:
                params:
                  type: object
                  description: Defines filters
                  required:
                    - search_by_block_num
                    - reverse
                  properties:
                    lower_bound:
                      type: integer
                    upper_bound:
                      type: integer
                    limit:
                      type: integer
                      description: default is 10
                    search_by_block_num:
                      type: boolean
                    reverse:
                      type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_activated_protocol_features" \
              -H "Content-Type: application/json" \
              -d '{
                "params": {
                  "lower_bound": 0,
                  "upper_bound": 100,
                  "limit": 10,
                  "search_by_block_num": true,
                  "reverse": false
                }
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              params: {
                lower_bound: 0,
                upper_bound: 100,
                limit: 10,
                search_by_block_num: true,
                reverse: false
              }
            };

            fetch("http://localhost:8888/v1/chain/get_activated_protocol_features", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/get_activated_protocol_features"
            payload = {
              "params": {
                "lower_bound": 0,
                "upper_bound": 100,
                "limit": 10,
                "search_by_block_num": True,
                "reverse": False
              }
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)

  "/get_accounts_by_authorizers":
    post:
      description: Find all account permission authorities that match provided accounts and keys
      operationId: get_accounts_by_authorizers
      requestBody:
        content:
          application/json:
            example:
              accounts:
                - "someacc"
                - actor: "someactor"
                  permission: "active"
              keys:
                - "PUB_K1_xyz..."
            schema:
              type: object
              properties:
                accounts:
                  type: array
                  items:
                    anyOf:
                      - "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
                      - type: object
                        required: [actor, permission]
                        properties:
                          actor:
                            "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
                          permission:
                            "$ref": "#/paths/~1get_abi/post/requestBody/content/application~1json/schema/properties/account_name"
                keys:
                  type: array
                  items:
                    "$ref": "#/paths/~1get_required_keys/post/requestBody/content/application~1json/schema/properties/available_keys/items"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: A list of accounts which are authorized
                required: [accounts]
                properties:
                  accounts:
                    type: array
                    items:
                      type: object
                      required: [account_name, permission_name, authorizer, weight, threshold]
      x-codeSamples:
        - lang: Shell
          label: Shell
          source: |
            curl -X POST "http://localhost:8888/v1/chain/get_accounts_by_authorizers" \
              -H "Content-Type: application/json" \
              -d '{
                "accounts": [
                  "someacc",
                  { "actor": "someactor", "permission": "active" }
                ],
                "keys": ["PUB_K1_xyz..."]
              }'
        - lang: Node.js
          label: Node.js
          source: |
            const fetch = require('node-fetch');

            const body = {
              accounts: [
                "someacc",
                { actor: "someactor", permission: "active" }
              ],
              keys: ["PUB_K1_xyz..."]
            };

            fetch("http://localhost:8888/v1/chain/get_accounts_by_authorizers", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(body)
            })
              .then(res => res.json())
              .then(console.log)
              .catch(console.error);
        - lang: Python
          label: Python
          source: |
            import requests

            url = "http://localhost:8888/v1/chain/get_accounts_by_authorizers"
            payload = {
              "accounts": [
                "someacc",
                { "actor": "someactor", "permission": "active" }
              ],
              "keys": ["PUB_K1_xyz..."]
            }
            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers)
            print(response.text)
