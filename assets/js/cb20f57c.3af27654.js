"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[3807],{43506:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=t(74848),s=t(28453);const a={},o="Define secondary index",r={id:"api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-singleton",title:"Define secondary index",description:"Overview",source:"@site/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-singleton.md",sourceDirName:"api-reference/wire-cdt/how-to-guides/multi-index",slug:"/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-singleton",permalink:"/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-singleton",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/edit/master/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-singleton.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Reference",id:"reference",level:2},{value:"Before you begin",id:"before-you-begin",level:2},{value:"Procedure",id:"procedure",level:2},{value:"1. Preparation And Initialization",id:"1-preparation-and-initialization",level:3},{value:"2. Define The Table Data Structure",id:"2-define-the-table-data-structure",level:3},{value:"3. Define A Singleton Type Alias",id:"3-define-a-singleton-type-alias",level:3},{value:"4. Define The Singleton Instance",id:"4-define-the-singleton-instance",level:3},{value:"5. Initialize And Use The Singleton Instance",id:"5-initialize-and-use-the-singleton-instance",level:3},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"define-secondary-index",children:"Define secondary index"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This guide provides instructions to define a singleton."}),"\n",(0,i.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsx)(n.p,{children:"See the following code reference:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"singleton"})," class."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"before-you-begin",children:"Before you begin"}),"\n",(0,i.jsx)(n.p,{children:"Make sure you have the following prerequisites in place:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A Wire development environment, for details consult the ",(0,i.jsx)(n.a,{href:"/docs/getting-started/getting-started-intro",children:"Getting Starter guide"}),","]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"procedure",children:"Procedure"}),"\n",(0,i.jsxs)(n.p,{children:["A singleton uses a single multi-index table to store named objects of various types. To define a simple singleton, which is storing an account ",(0,i.jsx)(n.code,{children:"name"})," as primary value and a ",(0,i.jsx)(n.code,{children:"uint64_t"})," as secondary value in structure ",(0,i.jsx)(n.code,{children:"testtable"}),", follow the steps below:"]}),"\n",(0,i.jsx)(n.h3,{id:"1-preparation-and-initialization",children:"1. Preparation And Initialization"}),"\n",(0,i.jsxs)(n.p,{children:["Include the ",(0,i.jsx)(n.code,{children:"sysio.hpp"})," and ",(0,i.jsx)(n.code,{children:"singleton.hpp"})," headers and declare the ",(0,i.jsx)(n.code,{children:"sysio"})," namespace usage"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <sysio/sysio.hpp>\n#include <sysio/singleton.hpp>\nusing namespace sysio;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-define-the-table-data-structure",children:"2. Define The Table Data Structure"}),"\n",(0,i.jsx)(n.p,{children:"Define the data structure for the multi-index table:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"struct [[sysio::table]] testtable {\n   name primary_value;\n   uint64_t secondary_value;\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-define-a-singleton-type-alias",children:"3. Define A Singleton Type Alias"}),"\n",(0,i.jsxs)(n.p,{children:["For ease of use, define a type alias ",(0,i.jsx)(n.code,{children:"singleton_type"})," based on the ",(0,i.jsx)(n.code,{children:"sysio::singleton"})," template type, parametarized with a random name ",(0,i.jsx)(n.code,{children:'"testtable"'})," and the ",(0,i.jsx)(n.code,{children:"testtable"})," data structure. The names must adhere to the existing account name restrictions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:'struct [[sysio::table]] testtable {\n   name primary_value;\n   uint64_t secondary_value;\n};\n+using singleton_type = sysio::singleton<"testtable"_n, testtable>;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-define-the-singleton-instance",children:"4. Define The Singleton Instance"}),"\n",(0,i.jsxs)(n.p,{children:["Define the singleton table instance as a data member of type ",(0,i.jsx)(n.code,{children:"singleton_type"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:'struct [[sysio::table]] testtable {\n   name primary_value;\n   uint64_t secondary_value;\n};\n\nusing singleton_type = sysio::singleton<"testtable"_n, testtable>;\n+singleton_type singleton_instance;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5-initialize-and-use-the-singleton-instance",children:"5. Initialize And Use The Singleton Instance"}),"\n",(0,i.jsxs)(n.p,{children:["Initialize the ",(0,i.jsx)(n.code,{children:"singleton_instance"})," using the constructor with the parameters ",(0,i.jsx)(n.code,{children:"receiver"})," and ",(0,i.jsx)(n.code,{children:"code"})," (the last one in in this case is ",(0,i.jsx)(n.code,{children:"receiver.value"}),"). These parameters, combined with ",(0,i.jsx)(n.code,{children:"testtable"}),", provide access to the partition of the RAM cache used by this singleton. In our example you initialize the ",(0,i.jsx)(n.code,{children:"singleton_instance"})," data member in the smart contract constructor, see below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"// singleton contract constructor\nsingleton_example( name receiver, name code, datastream<const char*> ds ) :\n   contract(receiver, code, ds),\n+  singleton_instance(receiver, receiver.value)\n   { }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now you have defined and initialized a singleton as a data member for the smart contract class. You can access it from any of the smart contract methods via ",(0,i.jsx)(n.code,{children:"singleton_instance"})," data member. Below you can find a possible implementation for the full class singleton example contract."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"singleton_example.hpp"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <sysio/sysio.hpp>\n#include <sysio/singleton.hpp>\nusing namespace sysio;\n\nclass [[sysio::contract]] singleton_example : public contract {\n   public:\n      using contract::contract;\n      singleton_example( name receiver, name code, datastream<const char*> ds ) :\n         contract(receiver, code, ds),\n         singleton_instance(receiver, receiver.value)\n         {}\n\n      [[sysio::action]]\n      void set( name user, uint64_t value );\n      [[sysio::action]]\n      void get( );\n\n      struct [[sysio::table]] testtable {\n         name primary_value;\n         uint64_t secondary_value;\n         uint64_t primary_key() const { return primary_value.value; }\n      } testtablerow;\n\n      using singleton_type = sysio::singleton<"testtable"_n, testtable>;\n      singleton_type singleton_instance;\n\n      using set_action = action_wrapper<"set"_n, &singleton_example::set>;\n      using get_action = action_wrapper<"get"_n, &singleton_example::get>;\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Below is an example for the ",(0,i.jsx)(n.code,{children:"get"})," and ",(0,i.jsx)(n.code,{children:"set"})," actions. It also demonstrates the usage of the ",(0,i.jsx)(n.code,{children:"get"})," and ",(0,i.jsx)(n.code,{children:"set"})," singleton methods. Note that the ",(0,i.jsx)(n.code,{children:"set"})," action makes use of the singleton's ",(0,i.jsx)(n.code,{children:"set"})," method, for which the second parameter is the payer account for the RAM needed to store the new value."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"singleton_example.cpp"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <singleton_example.hpp>\n\n[[sysio::action]] void singleton_example::set( name user, uint64_t value ) {\n   auto entry_stored = singleton_instance.get_or_create(user, testtablerow);\n   entry_stored.primary_value = user;\n   entry_stored.secondary_value = value;\n   singleton_instance.set(entry_stored, user);\n}\n\n[[sysio::action]] void singleton_example::get( ) {\n   if (singleton_instance.exists())\n      sysio::print(\n         "Value stored for: ", \n         name{singleton_instance.get().primary_value.value},\n         " is ",\n         singleton_instance.get().secondary_value,\n         "\\n");\n   else\n      sysio::print("Singleton is empty\\n");\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["| A full example project demonstrating the instantiation and usage of singleton can be found ",(0,i.jsx)(n.a,{href:"https://github.com/Wire-Network/cdt/blob/main/examples/multi_index_example",children:"here"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"In conclusion, the above instructions show how to define a singleton."}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Singleton uses as underlying structure a multi-index table therefore you can ",(0,i.jsx)(n.a,{href:"./how-to-iterate-and-retrieve-a-multi_index-table",children:"iterate and retrieve data"})," from the singleton the same way you would with a multi-index table."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(96540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);