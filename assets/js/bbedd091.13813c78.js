"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[226],{17443:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>p,toc:()=>a});var i=o(74848),t=o(28453);const s={title:"Nodeop Options"},c=void 0,p={id:"api-reference/tooling/nodeop/usage/nodeop-options",title:"Nodeop Options",description:"Nodeop is a command line interface (CLI) application. As such, it can be started manually from the command line or through an automated script. The behavior of nodeop is determined mainly by which plugins are loaded and which plugin options are used. The nodeop application features two main option categories: nodeop-specific options and plugin-specific options.",source:"@site/docs/api-reference/tooling/nodeop/usage/nodeop-options.md",sourceDirName:"api-reference/tooling/nodeop/usage",slug:"/api-reference/tooling/nodeop/usage/nodeop-options",permalink:"/docs/api-reference/tooling/nodeop/usage/nodeop-options",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/edit/master/docs/api-reference/tooling/nodeop/usage/nodeop-options.md",tags:[],version:"current",frontMatter:{title:"Nodeop Options"}},r={},a=[{value:"Nodeop-specific Options",id:"nodeop-specific-options",level:2},{value:"Plugin-specific Options",id:"plugin-specific-options",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Nodeop"})," is a command line interface (CLI) application. As such, it can be started manually from the command line or through an automated script. The behavior of ",(0,i.jsx)(n.code,{children:"nodeop"})," is determined mainly by which plugins are loaded and which plugin options are used. The ",(0,i.jsx)(n.code,{children:"nodeop"})," application features two main option categories: ",(0,i.jsx)(n.em,{children:"nodeop-specific"})," options and ",(0,i.jsx)(n.em,{children:"plugin-specific"})," options."]}),"\n",(0,i.jsx)(n.h2,{id:"nodeop-specific-options",children:"Nodeop-specific Options"}),"\n",(0,i.jsxs)(n.p,{children:["Nodeop-specific options are used mainly for housekeeping purposes, such as setting the directory where the blockchain data resides, specifying the name of the ",(0,i.jsx)(n.code,{children:"nodeop"})," configuraton file, setting the name and path of the logging configuration file, etc. A sample output from running  ",(0,i.jsx)(n.code,{children:"nodeop --help"})," is displayed below, showing the nodeop-specific options (Note: the plugin-specific options have been excluded for clarity):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"Application Config Options:\n  --plugin arg                          Plugin(s) to enable, may be specified \n                                        multiple times\n\nApplication Command Line Options:\n  -h [ --help ]                         Print this help message and exit.\n  -v [ --version ]                      Print version information.\n  --full-version                        Print full version information.\n  --print-default-config                Print default configuration template\n  -d [ --data-dir ] arg                 Directory containing program runtime \n                                        data\n  --config-dir arg                      Directory containing configuration \n                                        files such as config.ini\n  -c [ --config ] arg (=config.ini)     Configuration file name relative to \n                                        config-dir\n  -l [ --logconf ] arg (=logging.json)  Logging configuration file name/path \n                                        for library users\n"})}),"\n",(0,i.jsx)(n.h2,{id:"plugin-specific-options",children:"Plugin-specific Options"}),"\n",(0,i.jsxs)(n.p,{children:["Plugin-specific options control the behavior of the nodeop plugins. Every plugin-specific option has a unique name, so it can be specified in any order within the command line or ",(0,i.jsx)(n.code,{children:"config.ini"})," file. When specifying one or more plugin-specific option(s), the applicable plugin(s) must also be enabled using the ",(0,i.jsx)(n.code,{children:"--plugin"})," option or else the corresponding option(s) will be ignored."]}),"\n",(0,i.jsxs)(n.p,{children:["For more information on each plugin-specific option, just visit the ",(0,i.jsx)(n.a,{href:"/docs/api-reference/tooling/nodeop/plugins/",children:"Plugins"})," section."]})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>p});var i=o(96540);const t={},s=i.createContext(t);function c(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);