"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[9665],{67616:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var n=o(74848),r=o(28453);const s={},i=void 0,a={id:"api-reference/wire-cdt/troubleshooting",title:"troubleshooting",description:"When sending an action to the blockchain you get the error below",source:"@site/docs/api-reference/wire-cdt/troubleshooting.md",sourceDirName:"api-reference/wire-cdt",slug:"/api-reference/wire-cdt/troubleshooting",permalink:"/docs/api-reference/wire-cdt/troubleshooting",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/docs/api-reference/wire-cdt/troubleshooting.md",tags:[],version:"current",frontMatter:{}},c={},h=[{value:"When sending an action to the blockchain you get the error below",id:"when-sending-an-action-to-the-blockchain-you-get-the-error-below",level:2},{value:"When sending an action to the blockchain an error similar to the one below is encountered",id:"when-sending-an-action-to-the-blockchain-an-error-similar-to-the-one-below-is-encountered",level:2},{value:"When sending an action to the blockchain an error similar to the one below is encountered",id:"when-sending-an-action-to-the-blockchain-an-error-similar-to-the-one-below-is-encountered-1",level:2},{value:"When deploying a contract code to the blockchain a similar error with the ones below is encountered",id:"when-deploying-a-contract-code-to-the-blockchain-a-similar-error-with-the-ones-below-is-encountered",level:2},{value:"Action triggers a ram charge which cannot be initiated from a notification",id:"action-triggers-a-ram-charge-which-cannot-be-initiated-from-a-notification",level:2},{value:"You successfully re-deployed the contract code, but when you query the table you get the custom message that you coded when the table is not initialized (doesn&#39;t exist), or the system error message below in case you do not have code that checks first if table exist",id:"you-successfully-re-deployed-the-contract-code-but-when-you-query-the-table-you-get-the-custom-message-that-you-coded-when-the-table-is-not-initialized-doesnt-exist-or-the-system-error-message-below-in-case-you-do-not-have-code-that-checks-first-if-table-exist",level:2},{value:"You successfully re-deployed the contract code, but when you query the table you get the fields of the row values swapped, that is, it appears the values stored in table rows are the same only that they are swapped between fields/columns",id:"you-successfully-re-deployed-the-contract-code-but-when-you-query-the-table-you-get-the-fields-of-the-row-values-swapped-that-is-it-appears-the-values-stored-in-table-rows-are-the-same-only-that-they-are-swapped-between-fieldscolumns",level:2},{value:"You successfully re-deployed the contract code, but when you query the table you get a parse error, like the one below, or the returned data seems to be garbage",id:"you-successfully-re-deployed-the-contract-code-but-when-you-query-the-table-you-get-a-parse-error-like-the-one-below-or-the-returned-data-seems-to-be-garbage",level:2},{value:"cdt-cpp process never completes",id:"cdt-cpp-process-never-completes",level:2},{value:"You can not find the <code>now()</code> time function, or the result of the <code>current_time_point</code> functions are not what you expected them to be",id:"you-can-not-find-the-now-time-function-or-the-result-of-the-current_time_point-functions-are-not-what-you-expected-them-to-be",level:2},{value:"You successfully re-deployed the contract code, but when you broadcast one of the contracts methods to the blockchain you get below error message",id:"you-successfully-re-deployed-the-contract-code-but-when-you-broadcast-one-of-the-contracts-methods-to-the-blockchain-you-get-below-error-message",level:2},{value:"Print statements from smart contract code are not seen in the output",id:"print-statements-from-smart-contract-code-are-not-seen-in-the-output",level:2},{value:"Print statements from smart contract code are not shown in the <code>expected order</code>",id:"print-statements-from-smart-contract-code-are-not-shown-in-the-expected-order",level:2},{value:"Assertion failure while creating an account after sysio.system was installed",id:"assertion-failure-while-creating-an-account-after-sysiosystem-was-installed",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"when-sending-an-action-to-the-blockchain-you-get-the-error-below",children:"When sending an action to the blockchain you get the error below"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-console",children:'{\n    "code":500,\n    "message":"Internal Service Error",\n    "error":{\n        "code":3090003,\n        "name":"unsatisfied_authorization",\n        "what":"Provided keys, permissions, and delays do not satisfy declared authorizations",\n        "details":[\n            {\n                "message":"transaction declares authority \'{"actor":"account_name","permission":"permission_name"}\', but does not have signatures for it under a provided delay of 0 ms, provided permissions [], provided keys ["SYS5ZcMvpgtDMdVtvCFewAQYTyfN6Vqhg4kdgauffx3jiaKaeWfY1"], and a delay max limit of 3888000000 ms",\n                "file":"authorization_manager.cpp",\n                "line_number":524,\n                "method":"check_authorization"\n            }\n        ]\n    }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": Verify if you did not forget to set code for contract, is it possible that you only set the ",(0,n.jsx)(t.code,{children:"abi"})," for the contract but not the code as well?"]}),"\n",(0,n.jsx)(t.h2,{id:"when-sending-an-action-to-the-blockchain-an-error-similar-to-the-one-below-is-encountered",children:"When sending an action to the blockchain an error similar to the one below is encountered"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-console",children:"Error 3015014: Pack data exception\nError Details:\nUnexpected input encountered while processing struct 'action_name_here'\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": You did not specify correctly the parameter when sending the action to the blockchain. When no parameter is needed the command should look like the one below"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sh",children:"clio push action eostutorial1 get '[]' -p eostutorial1@active\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The command above is one way of sending correctly ",(0,n.jsx)(t.code,{children:"get"})," action with no parameters to the blockchain."]}),"\n",(0,n.jsx)(t.h2,{id:"when-sending-an-action-to-the-blockchain-an-error-similar-to-the-one-below-is-encountered-1",children:"When sending an action to the blockchain an error similar to the one below is encountered"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-console",children:"error 2019-09-25T07:38:14.859 thread-0  main.cpp:3449                 main                 ] Failed with error: Assert Exception (10)\n!action_type.empty(): Unknown action action_name in contract eostutorial1\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": Verify if the action attribute ",(0,n.jsx)(t.code,{children:"[[sysio::action]]"})," is used when defining and/or declaring the action ",(0,n.jsx)(t.code,{children:"action_name"})," for the contract."]}),"\n",(0,n.jsx)(t.h2,{id:"when-deploying-a-contract-code-to-the-blockchain-a-similar-error-with-the-ones-below-is-encountered",children:"When deploying a contract code to the blockchain a similar error with the ones below is encountered"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-console",children:"Error 3160010: No abi file found\nor\nError 3160009: No wasm file found\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": Verify that ",(0,n.jsx)(t.code,{children:"abi"})," and ",(0,n.jsx)(t.code,{children:"wasm"})," files exist in the directory specified in the ",(0,n.jsx)(t.code,{children:"clio set contract"})," command, and that their names match the directory name."]}),"\n",(0,n.jsx)(t.h2,{id:"action-triggers-a-ram-charge-which-cannot-be-initiated-from-a-notification",children:"Action triggers a ram charge which cannot be initiated from a notification"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": This error happens because the notification action has no authorization to buy the needed RAM. In the context of multi-index tables, there is a table payer and a row payer. Only the contract can modify rows. The contract can create rows with a payer that did not authorize the action if the total amount of ram charged does not increase (e.g. delete a row and add another with the same payer). The table payer can not change until the last row is deleted. For the purposes of billing, a table is identified by the tuple ",(0,n.jsx)(t.code,{children:"contract, scope, table"}),". When you create a row for a ",(0,n.jsx)(t.code,{children:"contract, scope, table"})," tuple that doesn\u2019t exist, you create a table with the same payer. This can outlive the original row which created it, if other rows were created with that combination and this prevents the original payer from getting their ram back. Secondary indexes throw in more complexity since they use the lower 4 bits of the table name, producing additional ",(0,n.jsx)(t.code,{children:"contract, scope, table"})," tuples combinations. Key takeaway: payer is about billing, not access control"]}),"\n",(0,n.jsx)(t.h2,{id:"you-successfully-re-deployed-the-contract-code-but-when-you-query-the-table-you-get-the-custom-message-that-you-coded-when-the-table-is-not-initialized-doesnt-exist-or-the-system-error-message-below-in-case-you-do-not-have-code-that-checks-first-if-table-exist",children:"You successfully re-deployed the contract code, but when you query the table you get the custom message that you coded when the table is not initialized (doesn't exist), or the system error message below in case you do not have code that checks first if table exist"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-console",children:"Error 3050003: sysio_assert_message assertion failure\nError Details:\nassertion failure with message: singleton does not exist\npending console output: \n"})}),"\n",(0,n.jsx)(t.h2,{id:"you-successfully-re-deployed-the-contract-code-but-when-you-query-the-table-you-get-the-fields-of-the-row-values-swapped-that-is-it-appears-the-values-stored-in-table-rows-are-the-same-only-that-they-are-swapped-between-fieldscolumns",children:"You successfully re-deployed the contract code, but when you query the table you get the fields of the row values swapped, that is, it appears the values stored in table rows are the same only that they are swapped between fields/columns"}),"\n",(0,n.jsx)(t.h2,{id:"you-successfully-re-deployed-the-contract-code-but-when-you-query-the-table-you-get-a-parse-error-like-the-one-below-or-the-returned-data-seems-to-be-garbage",children:"You successfully re-deployed the contract code, but when you query the table you get a parse error, like the one below, or the returned data seems to be garbage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-console",children:"error 2019-09-26T07:05:54.825 thread-0  main.cpp:3449                 main                 ] Failed with error: Parse Error (4)\nCouldn't parse type_name\n"})}),"\n",(0,n.jsx)(t.h2,{id:"cdt-cpp-process-never-completes",children:"cdt-cpp process never completes"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": make sure you have at least 2 cores on the host that executes the cdt-cpp (e.g. docker container, VM, local sub-system)"]}),"\n",(0,n.jsxs)(t.h2,{id:"you-can-not-find-the-now-time-function-or-the-result-of-the-current_time_point-functions-are-not-what-you-expected-them-to-be",children:["You can not find the ",(0,n.jsx)(t.code,{children:"now()"})," time function, or the result of the ",(0,n.jsx)(t.code,{children:"current_time_point"})," functions are not what you expected them to be"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": The ",(0,n.jsx)(t.code,{children:"now()"})," function has been replaced by ",(0,n.jsx)(t.code,{children:"current_time_point().sec_since_epoch()"}),", it returns the time in microseconds from 1970 of the ",(0,n.jsx)(t.code,{children:"current block"})," as a time_point. There's also available ",(0,n.jsx)(t.code,{children:"current_block_time()"})," which returns the time in microseconds from 1970 of the ",(0,n.jsx)(t.code,{children:"current block"})," as a ",(0,n.jsx)(t.code,{children:"block_timestamp"}),". Be aware that for time base functions, the assumption is when you call something like ",(0,n.jsx)(t.code,{children:"now()"})," or ",(0,n.jsx)(t.code,{children:"current_time()"})," you will get the exact now/current time, however that is not the case with Wire, you get ",(0,n.jsx)(t.strong,{children:"the block time"}),", and only ever get ",(0,n.jsx)(t.strong,{children:"the block time"})," from the available ",(0,n.jsx)(t.code,{children:"sec_since_epoch()"})," or ",(0,n.jsx)(t.code,{children:"current_block_time()"})," no matter how many times you call it."]}),"\n",(0,n.jsx)(t.h2,{id:"you-successfully-re-deployed-the-contract-code-but-when-you-broadcast-one-of-the-contracts-methods-to-the-blockchain-you-get-below-error-message",children:"You successfully re-deployed the contract code, but when you broadcast one of the contracts methods to the blockchain you get below error message"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-console",children:"Error 3050004: sysio_assert_code assertion failure\nError Details:\nassertion failure with error code: 8000000000000000000\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": If you are referencing a smart contract from another smart contract and each of them have at least one action with the same name you will experience the above error when sending to the blockchain one of those actions, so what you have to do is to make sure the action names between those two contracts are not common."]}),"\n",(0,n.jsx)(t.h2,{id:"print-statements-from-smart-contract-code-are-not-seen-in-the-output",children:"Print statements from smart contract code are not seen in the output"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": There are a few reasons print statements do not show up in the output. One reason could be because an error occurs, in which case the whole transaction is rolled back and the print statements output is replaced by the error that occurs instead; Another reason is if you are in a loop, iterating through a table's rows for example and for each row you have a print statement that prints also the new line char at the ",(0,n.jsx)(t.code,{children:"'\\n'"})," only the chars before the new line char from the first iteration will be printed, nothing else after that, nothing from the second iteration onwards either."]}),"\n",(0,n.jsx)(t.p,{children:"The below code will print just the first line of the iteration."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'  auto index=0;\n  for (auto& item : testtab)\n  {\n    sysio::print_f("{item %}={%, %, %} \\n", ++index, item.test_primary, item.secondary, item.datum);\n  }\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The below code will print all lines of the iteration separated by ",(0,n.jsx)(t.code,{children:"'|'"})," char."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'  auto index=0;\n  for (auto& item : testtab)\n  {\n    sysio::print_f("{item %}={%, %, %} |", ++index, item.test_primary, item.secondary, item.datum);\n  }\n'})}),"\n",(0,n.jsxs)(t.h2,{id:"print-statements-from-smart-contract-code-are-not-shown-in-the-expected-order",children:["Print statements from smart contract code are not shown in the ",(0,n.jsx)(t.code,{children:"expected order"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Possible solution"}),": The key point here is the ",(0,n.jsx)(t.code,{children:"expected order"})," and what you think it should be. When looking at your smart contract action code implementation, which let's say it has a series of ",(0,n.jsx)(t.code,{children:"print"})," (either ",(0,n.jsx)(t.code,{children:"print_f"})," or ",(0,n.jsx)(t.code,{children:"printf"}),") statements, they might not necessarily be outputted in the order the ",(0,n.jsx)(t.code,{children:"apparent"})," code workflow is. One example is when inline transactions are sent from your smart contract action code, and you expect to see the ",(0,n.jsx)(t.code,{children:"print"})," statements from within the inline action code outputted before the ",(0,n.jsx)(t.code,{children:"print"})," statements made after the inline action ",(0,n.jsx)(t.code,{children:"send"})," statement. For better exemplification let's look at the code below:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'[[sysio::action]] void multi_index_example::mod( name user, uint64_t n ) {\n\n  // `mod` action implementation code goes here...\n\n  print_f("Output line before the inline send action.")\n\n  singleton_set_action singleton_set("eostutorial1"_n, {get_self(), "active"_n});\n  singleton_set.send(get_self(), n, get_self());\n\n  print_f("Output line after the inline send action.")\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The code above has one ",(0,n.jsx)(t.code,{children:"print"})," statement before the ",(0,n.jsx)(t.code,{children:"singleton_set.send"})," and another one after the ",(0,n.jsx)(t.code,{children:"singleton_set.send"}),". If you wrote some more ",(0,n.jsx)(t.code,{children:"print"})," statements in the code that implements the ",(0,n.jsx)(t.code,{children:"singleton_set.send"})," action and expect to see them before the second ",(0,n.jsx)(t.code,{children:"print"})," statement then it is a wrong assumption. The inline actions are broadcasted to the network and they are executed at a different time, asynchronous of the current execution thread of the current ",(0,n.jsx)(t.code,{children:"multi_index_example::mod"})," action, therefor it is impossible to predict when the ",(0,n.jsx)(t.code,{children:"print"})," statements from inline action code will be outputted."]}),"\n",(0,n.jsx)(t.h2,{id:"assertion-failure-while-creating-an-account-after-sysiosystem-was-installed",children:"Assertion failure while creating an account after sysio.system was installed"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sh",children:"clio create account sysio bob SYS5HUanbay86UUnr1d4fuBsQ3ksjfgZYoLUVvrYVLy6pj4i8xqVY\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-console",children:"Error 3050003: sysio_assert_message assertion failure\nError Details:\nassertion failure with message: system contract must first be initialized\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The failure is stating that ",(0,n.jsx)(t.code,{children:"sysio.system"})," ",(0,n.jsx)(t.code,{children:"init"})," action was not called yet. The ",(0,n.jsx)(t.code,{children:"init"})," action is implemented by the ",(0,n.jsx)(t.code,{children:"void init(uint64_t, symbol)"})," function. The first parameter is the version, this should always be ",(0,n.jsx)(t.code,{children:"0"})," for now, until a new version of ",(0,n.jsx)(t.code,{children:"init"})," will be created that handles more information.\nThe second parameter is the system's symbol (i.e. for main net this is ",(0,n.jsx)(t.code,{children:"SYS"}),"). If you followed the ",(0,n.jsx)(t.a,{href:"https://docs.eosnetwork.com/docs/latest/tutorials/bios-boot-sequence",children:"BIOS Boot Sequence"})," tutorial and created a system with the default symbol ",(0,n.jsx)(t.code,{children:"SYS"})," then ",(0,n.jsx)(t.code,{children:"SYS"})," shall be used as the system's symbol in the ",(0,n.jsx)(t.code,{children:"init"})," action. It is whatever symbol you as the chain creator want to use in your blockchain."]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>a});var n=o(96540);const r={},s=n.createContext(r);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);