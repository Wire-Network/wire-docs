"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[1084],{88632:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>d});var i=o(74848),c=o(28453);const t={title:"Block Production Explained"},l=void 0,r={id:"api-reference/tooling/nodeop/plugins/block-producing-explained",title:"Block Production Explained",description:"For simplicity of the explanation let's consider the following notations:",source:"@site/docs/api-reference/tooling/nodeop/plugins/block-producing-explained.md",sourceDirName:"api-reference/tooling/nodeop/plugins",slug:"/api-reference/tooling/nodeop/plugins/block-producing-explained",permalink:"/docs/api-reference/tooling/nodeop/plugins/block-producing-explained",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/docs/api-reference/tooling/nodeop/plugins/block-producing-explained.md",tags:[],version:"current",frontMatter:{title:"Block Production Explained"}},s={},d=[];function a(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"For simplicity of the explanation let's consider the following notations:"}),"\n",(0,i.jsx)(n.p,{children:"m = max_block_cpu_usage"}),"\n",(0,i.jsx)(n.p,{children:"t = block-time"}),"\n",(0,i.jsx)(n.p,{children:"e = last-block-cpu-effort-percent"}),"\n",(0,i.jsx)(n.p,{children:"w = block_time_interval = 500ms"}),"\n",(0,i.jsx)(n.p,{children:"a = produce-block-early-amount = (w - w*e/100) ms"}),"\n",(0,i.jsx)(n.p,{children:"p = produce-block-time; p = t - a"}),"\n",(0,i.jsx)(n.p,{children:"c = billed_cpu_in_block = minimum(m, w - a)"}),"\n",(0,i.jsx)(n.p,{children:"n = network tcp/ip latency"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Let's consider for exemplification the following four BPs and their network topology as depicted in below diagram"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dot-svg",children:'#p2p_local_chain_prunning.dot - local chain prunning\n#\n#notes: * to see image copy/paste to https://dreampuf.github.io/GraphvizOnline\n#       * image will be rendered by gatsby-remark-graphviz plugin in sysio docs.\n\ndigraph {\n    newrank=true  #allows ranks inside subgraphs (important!)\n    compound=true  #allows edges connecting nodes with subgraphs\n    graph [rankdir=LR]\n    node [style=filled, fillcolor=lightgray, shape=square, fixedsize=true, width=.55, fontsize=10]\n    edge [dir=both, arrowsize=.6, weight=100]\n    splines=false\n\n    subgraph cluster_chain {\n        label="Block Producers Peers"; labelloc="b"\n        graph [color=invis]\n        b0 [label="...", color=invis, style=""]\n        b1 [label="BP-A"]; b2 [label="BP-A\\nPeer"]; b3 [label="BP-B\\nPeer"]; b4 [label="BP-B"]\n        b5 [label="...", color=invis, style=""]\n        b0 -> b1 -> b2 -> b3 -> b4 -> b5\n    } //cluster_chain\n\n} //digraph\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"BP-A"})," will send block at ",(0,i.jsx)(n.code,{children:"p"})," and,"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"BP-B"})," needs block at time ",(0,i.jsx)(n.code,{children:"t"})," or otherwise will drop it."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"BP-A"}),"is producing 12 blocks as follows ",(0,i.jsx)(n.code,{children:"b(lock) at t(ime) 1"}),", ",(0,i.jsx)(n.code,{children:"bt 1.5"}),", ",(0,i.jsx)(n.code,{children:"bt 2"}),", ",(0,i.jsx)(n.code,{children:"bt 2.5"}),", ",(0,i.jsx)(n.code,{children:"bt 3"}),", ",(0,i.jsx)(n.code,{children:"bt 3.5"}),", ",(0,i.jsx)(n.code,{children:"bt 4"}),", ",(0,i.jsx)(n.code,{children:"bt 4.5"}),", ",(0,i.jsx)(n.code,{children:"bt 5"}),", ",(0,i.jsx)(n.code,{children:"bt 5.5"}),", ",(0,i.jsx)(n.code,{children:"bt 6"}),", ",(0,i.jsx)(n.code,{children:"bt 6.5"})," then ",(0,i.jsx)(n.code,{children:"BP-B"})," needs ",(0,i.jsx)(n.code,{children:"bt 6.5"})," by time ",(0,i.jsx)(n.code,{children:"6.5"})," so it has ",(0,i.jsx)(n.code,{children:".5"})," to produce ",(0,i.jsx)(n.code,{children:"bt 7"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Please notice that the time of ",(0,i.jsx)(n.code,{children:"bt 7"})," minus ",(0,i.jsx)(n.code,{children:".5"})," equals the time of ",(0,i.jsx)(n.code,{children:"bt 6.5"})," therefore time ",(0,i.jsx)(n.code,{children:"t"})," is the last block time of ",(0,i.jsx)(n.code,{children:"BP-A"})," and when ",(0,i.jsx)(n.code,{children:"BP-B"})," needs to start its first block."]})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var i=o(96540);const c={},t=i.createContext(c);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);