"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[4730],{15772:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var n=i(74848),a=i(28453);const r={},d="Define primary index",s={id:"api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-primary-index",title:"Define primary index",description:"Overview",source:"@site/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-primary-index.md",sourceDirName:"api-reference/wire-cdt/how-to-guides/multi-index",slug:"/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-primary-index",permalink:"/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-primary-index",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/edit/master/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-primary-index.md",tags:[],version:"current",frontMatter:{}},l={},o=[{value:"Overview",id:"overview",level:2},{value:"Reference",id:"reference",level:2},{value:"Before you begin",id:"before-you-begin",level:2},{value:"Procedure",id:"procedure",level:2},{value:"1. Preparation And Initialization",id:"1-preparation-and-initialization",level:3},{value:"2. Define The Table Data Structure",id:"2-define-the-table-data-structure",level:3},{value:"3. Define The Primary Index",id:"3-define-the-primary-index",level:3},{value:"4. Define A Multi-Index Type Alias",id:"4-define-a-multi-index-type-alias",level:3},{value:"5. Instantiate The Multi-Index Table",id:"5-instantiate-the-multi-index-table",level:3},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"define-primary-index",children:"Define primary index"})}),"\n",(0,n.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,n.jsx)(t.p,{children:"This guide provides instructions to define a primary index for a multi-index table."}),"\n",(0,n.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,n.jsx)(t.p,{children:"See the following code reference:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"multi-index"})," class."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"before-you-begin",children:"Before you begin"}),"\n",(0,n.jsx)(t.p,{children:"Make sure you have the following prerequisites in place:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["A Wire development environment, for details consult the ",(0,n.jsx)(t.a,{href:"https://docs.eosnetwork.com/docs/latest/getting-started/",children:"Get Started Guide"}),","]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"procedure",children:"Procedure"}),"\n",(0,n.jsxs)(t.p,{children:["Complete the following steps to define a primary index for the multi-index table ",(0,n.jsx)(t.code,{children:"testtab"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"1-preparation-and-initialization",children:"1. Preparation And Initialization"}),"\n",(0,n.jsxs)(t.p,{children:["Include the ",(0,n.jsx)(t.code,{children:"sysio.hpp"})," header and use the ",(0,n.jsx)(t.code,{children:"using"})," directive to access the ",(0,n.jsx)(t.code,{children:"sysio"})," namespace."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"#include <sysio/sysio.hpp>\nusing namespace sysio;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"2-define-the-table-data-structure",children:"2. Define The Table Data Structure"}),"\n",(0,n.jsx)(t.p,{children:"Define the data structure for the multi-index table."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"  struct [[sysio::table]] test_table {\n  };\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Add the data structure data members. Each data member corresponds to a field of the multi-index table. A primary key is required when defining a multi-index table structure, therefore you need to know which is the multi-index table field that is the primary key for your multi-index table. The corresponding data member for the primary key field must store unique values. In this case it is the ",(0,n.jsx)(t.code,{children:"test_primary"})," data member of type ",(0,n.jsx)(t.code,{children:"sysio::name"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-diff",children:"  // the data structure which defines each row of the table\n  struct [[sysio::table]] test_table {\n+    // this data member stores a name for each row of the multi-index table\n+    name test_primary;\n+    // additional data stored in table row, e.g. an uint64_t type data\n+    uint64_t datum;\n  };\n"})}),"\n",(0,n.jsx)(t.h3,{id:"3-define-the-primary-index",children:"3. Define The Primary Index"}),"\n",(0,n.jsxs)(t.p,{children:["Add the definition of the primary index for the multi-index table. The primary index type must be uint64_t, it must be unique and must be named ",(0,n.jsx)(t.code,{children:"primary_key()"}),", otherwise the compiler (cdt-cpp) will generate an error saying it can not find the field to use as the primary key:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-diff",children:"  // the data structure which defines each row of the table\n  struct [[sysio::table]] test_table {\n    // this data member stores a name for each row of the multi-index table\n    name test_primary;\n    // additional data stored in table row\n    uint64_t datum;\n+    // mandatory definition for primary key getter\n+    uint64_t primary_key( ) const { return test_primary.value; }\n  };\n"})}),"\n",(0,n.jsxs)(t.admonition,{type:"info",children:[(0,n.jsx)(t.p,{children:"| Secondary indexes may be defined which are not unique. There can be up to 16 secondary indexes. Secondary indices support the following types:"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"uint64_t"}),"\n",(0,n.jsx)(t.li,{children:"uint128_t"}),"\n",(0,n.jsx)(t.li,{children:"uint256_t"}),"\n",(0,n.jsx)(t.li,{children:"double"}),"\n",(0,n.jsx)(t.li,{children:"long double"}),"\n"]})]}),"\n",(0,n.jsx)(t.h3,{id:"4-define-a-multi-index-type-alias",children:"4. Define A Multi-Index Type Alias"}),"\n",(0,n.jsxs)(t.p,{children:["For ease of use, define a type alias ",(0,n.jsx)(t.code,{children:"test_table_t"})," based on the ",(0,n.jsx)(t.code,{children:"sysio::multi_index"})," template type, parametarized with a random name ",(0,n.jsx)(t.code,{children:'"testtaba"'})," and the ",(0,n.jsx)(t.code,{children:"test_table"})," data structure. The names must adhere to the existing account name restrictions."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-diff",children:'  // the data structure which defines each row of the table\n  struct [[sysio::table]] test_table {\n    // this data member stores a name for each row of the multi-index table\n    name test_primary;\n    // additional data stored in table row\n    uint64_t datum;\n    // mandatory definition for primary key getter\n    uint64_t primary_key( ) const { return test_primary.value; }\n  };\n  \n+  typedef sysio::multi_index<"testtaba"_n, test_table> test_table_t;\n'})}),"\n",(0,n.jsx)(t.h3,{id:"5-instantiate-the-multi-index-table",children:"5. Instantiate The Multi-Index Table"}),"\n",(0,n.jsxs)(t.p,{children:["Declare the ",(0,n.jsx)(t.code,{children:"testtab"})," multi-index table as a data member of type ",(0,n.jsx)(t.code,{children:"test_table_t"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-diff",children:'  // the data structure which defines each row of the table\n  struct [[sysio::table]] test_table {\n    // this data member stores a name for each row of the multi-index table\n    name test_primary;\n    // additional data stored in table row\n    uint64_t datum;\n    // mandatory definition for primary key getter\n    uint64_t primary_key( ) const { return test_primary.value; }\n  };\n  \n  typedef sysio::multi_index<"testtaba"_n, test_table> test_table_t;\n+  test_table_t testtab;\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Now you have instantiated a multi-index table, and assigned to ",(0,n.jsx)(t.code,{children:"testtab"})," variable, which has a primary index defined for its ",(0,n.jsx)(t.code,{children:"test_primary"})," data member."]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["| A full example project demonstrating the instantiation and usage of multi-index table can be found ",(0,n.jsx)(t.a,{href:"https://github.com/Wire-Network/cdt/blob/main/examples/multi_index_example",children:"here"}),"."]})}),"\n",(0,n.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,n.jsx)(t.p,{children:"In conclusion, the above instructions show how to define a primary index for a multi-index table."}),"\n",(0,n.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["You can ",(0,n.jsx)(t.a,{href:"./how-to-insert-data-into-a-multi-index-table",children:"insert data in the multi-index table"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["You can ",(0,n.jsx)(t.a,{href:"./how-to-iterate-and-retrieve-a-multi_index-table",children:"iterate and retrieve data"})," from the multi-index table."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>d,x:()=>s});var n=i(96540);const a={},r=n.createContext(a);function d(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);