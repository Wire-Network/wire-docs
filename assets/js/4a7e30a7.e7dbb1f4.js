"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[9287],{49140:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(74848),d=n(28453);const a={},r=void 0,s={id:"api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-secondary-index",title:"how-to-define-a-secondary-index",description:"\x3c!-- ---",source:"@site/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-secondary-index.md",sourceDirName:"api-reference/wire-cdt/how-to-guides/multi-index",slug:"/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-secondary-index",permalink:"/wire-docs/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-secondary-index",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-define-a-secondary-index.md",tags:[],version:"current",frontMatter:{}},o={},c=[{value:"Overview",id:"overview",level:2},{value:"Reference",id:"reference",level:2},{value:"Before you begin",id:"before-you-begin",level:2},{value:"Procedure",id:"procedure",level:2},{value:"1. Extend The Multi-Index Data Structure",id:"1-extend-the-multi-index-data-structure",level:3},{value:"2. Add The Secondary Index Accessor Method",id:"2-add-the-secondary-index-accessor-method",level:3},{value:"3. Define The Secondary Index",id:"3-define-the-secondary-index",level:3},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"This guide provides instructions to define a secondary index for a multi-index table."}),"\n",(0,i.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsx)(t.p,{children:"See the following code reference:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"multi-index"})," class."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"before-you-begin",children:"Before you begin"}),"\n",(0,i.jsx)(t.p,{children:"Make sure you have the following prerequisites in place:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["A Wire development environment, for details consult the ",(0,i.jsx)(t.a,{href:"/wire-docs/docs/getting-started/getting-started-intro",children:"Getting Started Guide"}),","]}),"\n",(0,i.jsxs)(t.li,{children:["A multi-index table ",(0,i.jsx)(t.code,{children:"testtab"})," along with its ",(0,i.jsx)(t.code,{children:"test_table"})," data structure, its mandatory primary index, and the type alias definition ",(0,i.jsx)(t.code,{children:"test_table_t"}),". Please see ",(0,i.jsx)(t.a,{href:"./how-to-define-a-primary-index",children:"How To Define A Primary Index"})," to set up these prerequisites."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"procedure",children:"Procedure"}),"\n",(0,i.jsxs)(t.p,{children:["Complete the following steps to define a secondary index for the multi-index table ",(0,i.jsx)(t.code,{children:"testtab"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"1-extend-the-multi-index-data-structure",children:"1. Extend The Multi-Index Data Structure"}),"\n",(0,i.jsxs)(t.p,{children:["Add a second data member ",(0,i.jsx)(t.code,{children:"secondary"}),", of type ",(0,i.jsx)(t.code,{children:"sysio::name"}),", to the ",(0,i.jsx)(t.code,{children:"test_table"})," data structure that defines the ",(0,i.jsx)(t.code,{children:"testtab"})," data."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:"  struct [[sysio::table]] test_table {\n    // this data member stores a name for each row of the multi-index table\n    name test_primary;\n+    name secondary;\n    // additional data stored in table row\n    uint64_t datum;\n    // mandatory definition for primary key getter\n    uint64_t primary_key( ) const { return test_primary.value; }\n  };\n"})}),"\n",(0,i.jsx)(t.h3,{id:"2-add-the-secondary-index-accessor-method",children:"2. Add The Secondary Index Accessor Method"}),"\n",(0,i.jsxs)(t.p,{children:["Add ",(0,i.jsx)(t.code,{children:"by_secondary()"})," method, which is the index accessor method to the new data member added. The secondary index, that will be added in the next step, will index this new data structure data member."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:"  struct [[sysio::table]] test_table {\n    // this data member stores a name for each row of the multi-index table\n    name test_primary;\n    name secondary;\n    // additional data stored in table row\n    uint64_t datum;\n    // mandatory definition for primary key getter\n    uint64_t primary_key( ) const { return test_primary.value; }\n+    uint64_t by_secondary( ) const { return secondary.value; }\n  };\n"})}),"\n",(0,i.jsx)(t.h3,{id:"3-define-the-secondary-index",children:"3. Define The Secondary Index"}),"\n",(0,i.jsxs)(t.p,{children:["In the ",(0,i.jsx)(t.code,{children:"test_table_t"})," type definition, add the definition of the secondary index with the use of the ",(0,i.jsx)(t.code,{children:"sysio::indexed_by"})," template. ",(0,i.jsx)(t.code,{children:"sysio::index_by"})," needs two parameters: the name of the index, ",(0,i.jsx)(t.code,{children:'"secid"_n'}),", and a function call operator which extracts the value from the secondary data member as an index key. The function call operator is defined with the use of ",(0,i.jsx)(t.code,{children:"sysio::const_mem_fun"})," template which receives two parameters: the data structure ",(0,i.jsx)(t.code,{children:"test_table"})," and the reference to the getter function member ",(0,i.jsx)(t.code,{children:"by_secondary"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:'-  typedef sysio::multi_index<"testtaba"_n, test_table> test_table_t;\n+  typedef sysio::multi_index<"testtaba"_n, test_table, sysio::indexed_by<"secid"_n, sysio::const_mem_fun<test_table, uint64_t, &test_table::by_secondary>>> test_table_t;\n'})}),"\n",(0,i.jsx)(t.p,{children:"For reference see below the full contract definition code with all the changes described above."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"multi_index_example.hpp"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#include <sysio/sysio.hpp>\nusing namespace sysio;\n\n// multi-index example contract class\nclass [[sysio::contract]] multi_index_example : public contract {\n  public:\n      using contract::contract;\n\n      // contract class constructor\n      multi_index_example( name receiver, name code, datastream<const char*> ds ) :\n        // contract base class contructor\n        contract(receiver, code, ds),\n        // instantiate multi-index instance as data member (find it defined below)\n        testtab(receiver, receiver.value) \n        { }\n\n      struct [[sysio::table]] test_table {\n        // this data member stores a name for each row of the multi-index table\n        name test_primary;\n        name secondary;\n        // additional data stored in table row\n        uint64_t datum;\n        // mandatory definition for primary key getter\n        uint64_t primary_key( ) const { return test_primary.value; }\n        uint64_t by_secondary( ) const { return secondary.value; }\n      };\n\n      // the multi-index type definition, for ease of use a type alias `test_table_t` is defined, \n      // based on the multi_index template type, parametarized with a random name, the \n      // test_table data structure, and the secondary index\n      typedef sysio::multi_index<"testtaba"_n, test_table, sysio::indexed_by<"secid"_n, sysio::const_mem_fun<test_table, uint64_t, &test_table::by_secondary>>> test_table_t;\n\n      // the multi-index table instance declared as a data member of type test_table_t\n      test_table_t testtab;\n\n      [[sysio::action]] void set( name user );\n      [[sysio::action]] void print( name user );\n\n      using set_action = action_wrapper<"set"_n, &multi_index_example::set>;\n      using print_action = action_wrapper<"print"_n, &multi_index_example::print>;\n};\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Now you have instantiated the ",(0,i.jsx)(t.code,{children:"testtab"})," as a multi-index table which has a primary index defined for its ",(0,i.jsx)(t.code,{children:"test_primary"})," data member and a secondary index for its ",(0,i.jsx)(t.code,{children:"secondary"})," data member."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["| A full example project demonstrating the instantiation and usage of multi-index table can be found ",(0,i.jsx)(t.a,{href:"https://github.com/Wire-Network/cdt/blob/main/examples/multi_index_example",children:"here"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(t.p,{children:"In conclusion, the above instructions show how to define a secondary index for a multi-index table."}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["You can ",(0,i.jsx)(t.a,{href:"./how-to-iterate-and-retrieve-a-multi_index-table-based-on-secondary-index",children:"iterate and retrieve data using the secondary index"})," from the multi-index table."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var i=n(96540);const d={},a=i.createContext(d);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);