"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[8801],{20963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(74848),o=t(28453);const r={},s="cdt-cc",c={id:"api-reference/tooling/cdt/cdt-cc",title:"cdt-cc",description:"To manually compile the source code, use cdt-cc and cdt-ld as if it were clang and lld. All the includes and options specific to Wire Sysio and CDT are baked in.",source:"@site/docs/api-reference/tooling/cdt/cdt-cc.md",sourceDirName:"api-reference/tooling/cdt",slug:"/api-reference/tooling/cdt/cdt-cc",permalink:"/wire-docs/docs/api-reference/tooling/cdt/cdt-cc",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/docs/api-reference/tooling/cdt/cdt-cc.md",tags:[],version:"current",frontMatter:{},sidebar:"apiReferenceSidebar",previous:{title:"cdt-abidiff",permalink:"/wire-docs/docs/api-reference/tooling/cdt/cdt-abidiff"},next:{title:"cdt-cpp",permalink:"/wire-docs/docs/api-reference/tooling/cdt/cdt-cpp"}},a={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cdt-cc",children:"cdt-cc"})}),"\n",(0,i.jsxs)(n.p,{children:["To manually compile the source code, use ",(0,i.jsx)(n.code,{children:"cdt-cc"})," and ",(0,i.jsx)(n.code,{children:"cdt-ld"})," as if it were ",(0,i.jsx)(n.strong,{children:"clang"})," and ",(0,i.jsx)(n.strong,{children:"lld"}),". All the includes and options specific to Wire Sysio and CDT are baked in."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"USAGE: cdt-cc [options] <input file> ...\n\nOPTIONS:\n\nGeneric Options:\n\n  -help                    - Display available options (-help-hidden for more)\n  -help-list               - Display list of available options (-help-list-hidden for more)\n  -version                 - Display the version of this program\n\ncompiler options:\n\n  -C                       - Include comments in preprocessed output\n  -CC                      - Include comments from within macros in preprocessed output\n  -D=<string>              - Define <macro> to <value> (or 1 if <value> omitted)\n  -E                       - Only run the preprocessor\n  -I=<string>              - Add directory to include search path\n  -L=<string>              - Add directory to library search path\n  -MD                      - Write depfile containing user and system headers\n  -MF=<string>             - Write depfile output\n  -MMD                     - Write depfile containing user\n  -MT=<string>             - Specify name of main file output in depfile\n  -O=<string>              - Optimization level s, 0-3\n  -R=<string>              - Add a resource path for inclusion\n  -S                       - Only run preprocess and compilation steps\n  -U=<string>              - Undefine macro <macro>\n  -W=<string>              - Enable the specified warning\n  -abigen                  - Generate ABI\n  -abigen_output=<string>  - ABIGEN output\n  -c                       - Only run preprocess, compile, and assemble steps\n  -contract=<string>       - Contract name\n  -dD                      - Print macro definitions in -E mode in addition to normal output\n  -dI                      - Print include directives in -E mode in addition to normal output\n  -dM                      - Print macro definitions in -E mode instead to normal output\n  -emit-ast                - Emit Clang AST files for source inputs\n  -emit-llvm               - Use the LLVM representation for assembler and object files\n  -fasm                    - Assemble file for x86-64\n  -fcolor-diagnostics      - Use colors in diagnostics\n  -finline-functions       - Inline suitable functions\n  -finline-hint-functions  - Inline functions which are (explicitly or implicitly) marked inline\n  -fmerge-all-constants    - Allow merging of constants\n  -fnative                 - Compile and link for x86-64\n  -fno-cfl-aa              - Disable CFL Alias Analysis\n  -fno-elide-constructors  - Disable C++ copy constructor elision\n  -fno-lto                 - Disable LTO\n  -fno-post-pass           - Don't run post processing pass\n  -fno-stack-first         - Don't set the stack first in memory\n  -fquery                  - Produce binaries for wasmql\n  -fquery-client           - Produce binaries for wasmql\n  -fquery-server           - Produce binaries for wasmql\n  -fstack-protector        - Enable stack protectors for functions potentially vulnerable to stack smashing\n  -fstack-protector-all    - Force the usage of stack protectors for all functions\n  -fstack-protector-strong - Use a strong heuristic to apply stack protectors to functions\n  -fstrict-enums           - Enable optimizations based on the strict definition of an enum's value range\n  -fstrict-return          - Always treat control flow paths that fall off the end of a non-void function as unreachable\n  -fstrict-vtable-pointers - Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n  -fuse-main               - Use main as entry\n  -include=<string>        - Include file before parsing\n  -isystem=<string>        - Add directory to SYSTEM include search path\n  -l=<string>              - Root name of library to link\n  -lto-opt=<string>        - LTO Optimization level (O0-O3)\n  -o=<string>              - Write output to <file>\n  -stack-size=<int>        - Specifies the maximum stack size for the contract. Defaults to 8192 bytes.\n  -sysroot=<string>        - Set the system root directory\n  -v                       - Show commands to run and use verbose output\n  -w                       - Suppress all warnings\n  --warn-action-read-only  - Issue a warning if a read-only action uses a write API and continue compilation\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(96540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);