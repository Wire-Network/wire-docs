"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[6278],{24334:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=o(74848),i=o(28453);const s={},r=void 0,l={id:"api-reference/tooling/nodeop/plugins/state-history-plugin",title:"state-history-plugin",description:"Description",source:"@site/docs/api-reference/tooling/nodeop/plugins/state-history-plugin.md",sourceDirName:"api-reference/tooling/nodeop/plugins",slug:"/api-reference/tooling/nodeop/plugins/state-history-plugin",permalink:"/docs/api-reference/tooling/nodeop/plugins/state-history-plugin",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/docs/api-reference/tooling/nodeop/plugins/state-history-plugin.md",tags:[],version:"current",frontMatter:{},sidebar:"apiReferenceSidebar",previous:{title:"resource-monitor-plugin",permalink:"/docs/api-reference/tooling/nodeop/plugins/resource-monitor-plugin"},next:{title:"trace-api-plugin",permalink:"/docs/api-reference/tooling/nodeop/plugins/trace-api-plugin"}},a={},c=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Operations",id:"operations",level:2},{value:"Options",id:"options",level:2},{value:"Examples",id:"examples",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Load Dependency Examples",id:"load-dependency-examples",level:3},{value:"How-To Guides",id:"how-to-guides",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"state_history_plugin"})," is useful for capturing historical data about the blockchain state. The plugin receives blockchain data from other connected nodes and caches the data into files. The plugin listens on a socket for applications to connect and sends blockchain data back based on the plugin options specified when starting ",(0,t.jsx)(n.code,{children:"nodeop"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:"# config.ini\nplugin = sysio::state_history_plugin\n[options]\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# command-line\nnodeop ... --plugin sysio::state_history_plugin [operations] [options]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,t.jsxs)(n.p,{children:["These can only be specified from the ",(0,t.jsx)(n.code,{children:"nodeop"})," command-line:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:"Command Line Options for sysio::state_history_plugin:\n\n  --delete-state-history                clear state history files\n"})}),"\n",(0,t.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(n.p,{children:["These can be specified from both the ",(0,t.jsx)(n.code,{children:"nodeop"})," command-line or the ",(0,t.jsx)(n.code,{children:"config.ini"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:'Config Options for sysio::state_history_plugin:\n\n  --state-history-dir arg (="state-history")\n                                        the location of the state-history \n                                        directory (absolute path or relative to\n                                        application data dir)\n  --state-history-retained-dir arg (="")\n                                        the location of the state history \n                                        retained directory (absolute path or \n                                        relative to state-history dir).\n                                        If the value is empty, it is set to the\n                                        value of state-history directory.\n  --state-history-archive-dir arg (="archive")\n                                        the location of the state history \n                                        archive directory (absolute path or \n                                        relative to state-history dir).\n                                        If the value is empty, blocks files \n                                        beyond the retained limit will be \n                                        deleted.\n                                        All files in the archive directory are \n                                        completely under user\'s control, i.e. \n                                        they won\'t be accessed by nodeop \n                                        anymore.\n  --state-history-stride arg (=4294967295)\n                                        split the state history log files when \n                                        the block number is the multiple of the\n                                        stride\n                                        When the stride is reached, the current\n                                        history log and index will be renamed \n                                        \'*-history-<start num>-<end \n                                        num>.log/index\'\n                                        and a new current history log and index\n                                        will be created with the most recent \n                                        blocks. All files following\n                                        this format will be used to construct \n                                        an extended history log.\n  --max-retained-history-files arg (=10)\n                                        the maximum number of history file \n                                        groups to retain so that the blocks in \n                                        those files can be queried.\n                                        When the number is reached, the oldest \n                                        history file would be moved to archive \n                                        dir or deleted if the archive dir is \n                                        empty.\n                                        The retained history log files should \n                                        not be manipulated by users.\n  --trace-history                       enable trace history\n  --chain-state-history                 enable chain state history\n  --state-history-endpoint arg (=127.0.0.1:8080)\n                                        the endpoint upon which to listen for \n                                        incoming connections. Caution: only \n                                        expose this port to your internal \n                                        network.\n  --trace-history-debug-mode            enable debug mode for trace history\n  --context-free-data-compression arg (=zlib)\n                                        compression mode for context free data \n                                        in transaction traces. Supported \n                                        options are "zlib" and "none"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api-reference/tooling/nodeop/plugins/chain-plugin",children:(0,t.jsx)(n.code,{children:"chain_plugin"})})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"load-dependency-examples",children:"Load Dependency Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:"# config.ini\nplugin = sysio::chain_plugin --disable-replay-opts\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# command-line\nnodeop ... --plugin sysio::chain_plugin --disable-replay-opts\n"})}),"\n",(0,t.jsx)(n.h2,{id:"how-to-guides",children:"How-To Guides"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api-reference/tooling/nodeop/how-to/how-to-fast-start-without-old-history",children:"How to fast start without history on existing chains"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api-reference/tooling/nodeop/how-to/how-to-replay-or-resync-with-full-history",children:"How to replay or resync with full history"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api-reference/tooling/nodeop/how-to/how-to-create-snapshot-with-full-history",children:"How to create a portable snapshot with full state history"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/api-reference/tooling/nodeop/how-to/how-to-restore-snapshot-with-full-history",children:"How to restore a portable snapshot with full state history"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var t=o(96540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);