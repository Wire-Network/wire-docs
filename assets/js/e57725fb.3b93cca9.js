"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[2056],{70729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>o});var i=n(74848),a=n(28453);const r={},s=void 0,d={id:"api-reference/wire-cdt/how-to-guides/multi-index/how-to-instantiate-a-multi-index-table",title:"how-to-instantiate-a-multi-index-table",description:"\x3c!-- ---",source:"@site/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-instantiate-a-multi-index-table.md",sourceDirName:"api-reference/wire-cdt/how-to-guides/multi-index",slug:"/api-reference/wire-cdt/how-to-guides/multi-index/how-to-instantiate-a-multi-index-table",permalink:"/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-instantiate-a-multi-index-table",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-instantiate-a-multi-index-table.md",tags:[],version:"current",frontMatter:{}},l={},o=[{value:"Overview",id:"overview",level:2},{value:"Reference",id:"reference",level:2},{value:"Before you begin",id:"before-you-begin",level:2},{value:"Procedure",id:"procedure",level:2},{value:"1. Preparation And Initialization",id:"1-preparation-and-initialization",level:3},{value:"2. Define The Table Data Structure",id:"2-define-the-table-data-structure",level:3},{value:"3. Define The Primary Index",id:"3-define-the-primary-index",level:3},{value:"4. Define A Multi-Index Type Alias",id:"4-define-a-multi-index-type-alias",level:3},{value:"5. Instantiate The Multi-Index Table",id:"5-instantiate-the-multi-index-table",level:3},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"This guide provides instructions to instantiate a multi-index table."}),"\n",(0,i.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsx)(t.p,{children:"See the following code reference:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.a,{href:"http://example/com",children:(0,i.jsx)(t.code,{children:"multi-index"})})," class."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"before-you-begin",children:"Before you begin"}),"\n",(0,i.jsx)(t.p,{children:"Make sure you have the following prerequisites in place:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["A Wire development environment, for details consult the ",(0,i.jsx)(t.a,{href:"https://docs.eosnetwork.com/docs/latest/getting-started/",children:"Get Started Guide"}),","]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"procedure",children:"Procedure"}),"\n",(0,i.jsxs)(t.p,{children:["Complete the following steps to instantiate a multi-index table ",(0,i.jsx)(t.code,{children:"testtab"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"1-preparation-and-initialization",children:"1. Preparation And Initialization"}),"\n",(0,i.jsxs)(t.p,{children:["Include the ",(0,i.jsx)(t.code,{children:"sysio.hpp"})," header and use the ",(0,i.jsx)(t.code,{children:"using"})," directive to access the ",(0,i.jsx)(t.code,{children:"sysio"})," namespace."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"#include <sysio/sysio.hpp>\nusing namespace sysio;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"2-define-the-table-data-structure",children:"2. Define The Table Data Structure"}),"\n",(0,i.jsx)(t.p,{children:"Define the data structure for the multi-index table."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"  struct [[sysio::table]] test_table {\n  };\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Add the data structure data members. Each data member corresponds to a field of the multi-index table. A primary key is required when defining a multi-index table structure, therefore you need to know which is the multi-index table field that is the primary key for your multi-index table. The corresponding data member for the primary key field must store unique values. In this case it is the ",(0,i.jsx)(t.code,{children:"test_primary"})," data member of type ",(0,i.jsx)(t.code,{children:"sysio::name"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:"  // the data structure which defines each row of the table\n  struct [[sysio::table]] test_table {\n+    // this data member stores a name for each row of the multi-index table\n+    name test_primary;\n+    // additional data stored in table row, e.g. an uint64_t type data\n+    uint64_t datum;\n  };\n"})}),"\n",(0,i.jsx)(t.h3,{id:"3-define-the-primary-index",children:"3. Define The Primary Index"}),"\n",(0,i.jsxs)(t.p,{children:["Add the definition of the primary index for the multi-index table. The primary index type must be uint64_t, it must be unique and must be named ",(0,i.jsx)(t.code,{children:"primary_key()"}),", otherwise the compiler (cdt-cpp) will generate an error saying it can not find the field to use as the primary key:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:"  // the data structure which defines each row of the table\n  struct [[sysio::table]] test_table {\n    // this data member stores a name for each row of the multi-index table\n    name test_primary;\n    // additional data stored in table row\n    uint64_t datum;\n+    // mandatory definition for primary key getter\n+    uint64_t primary_key( ) const { return test_primary.value; }\n  };\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"| Other, secondary, indexes if they will be defined can have duplicates. You can have up to 16 additional indexes and the field types can be uint64_t, uint128_t, uint256_t, double or long double."})}),"\n",(0,i.jsx)(t.h3,{id:"4-define-a-multi-index-type-alias",children:"4. Define A Multi-Index Type Alias"}),"\n",(0,i.jsxs)(t.p,{children:["For ease of use, define a type alias ",(0,i.jsx)(t.code,{children:"test_table_t"})," based on the ",(0,i.jsx)(t.code,{children:"sysio::multi_index"})," template type, parametarized with a random name ",(0,i.jsx)(t.code,{children:'"testtaba"'})," and the ",(0,i.jsx)(t.code,{children:"test_table"})," data structure. The names must adhere to the existing account name restrictions."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:'  // the data structure which defines each row of the table\n  struct [[sysio::table]] test_table {\n    // this data member stores a name for each row of the multi-index table\n    name test_primary;\n    // additional data stored in table row\n    uint64_t datum;\n    // mandatory definition for primary key getter\n    uint64_t primary_key( ) const { return test_primary.value; }\n  };\n  \n+  typedef sysio::multi_index<"testtaba"_n, test_table> test_table_t;\n'})}),"\n",(0,i.jsx)(t.h3,{id:"5-instantiate-the-multi-index-table",children:"5. Instantiate The Multi-Index Table"}),"\n",(0,i.jsxs)(t.p,{children:["Declare the ",(0,i.jsx)(t.code,{children:"testtab"})," multi-index table as a data member of type ",(0,i.jsx)(t.code,{children:"test_table_t"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:'  // the data structure which defines each row of the table\n  struct [[sysio::table]] test_table {\n    // this data member stores a name for each row of the multi-index table\n    name test_primary;\n    // additional data stored in table row\n    uint64_t datum;\n    // mandatory definition for primary key getter\n    uint64_t primary_key( ) const { return test_primary.value; }\n  };\n  \n  typedef sysio::multi_index<"testtaba"_n, test_table> test_table_t;\n+  test_table_t testtab;\n'})}),"\n",(0,i.jsx)(t.h1,{id:"6-initialize-the-multi-index-table-instance",children:"6. Initialize The Multi-Index Table Instance"}),"\n",(0,i.jsxs)(t.p,{children:["Initialize the data member ",(0,i.jsx)(t.code,{children:"testtab"})," by passing to its constructor these two values: ",(0,i.jsx)(t.code,{children:"receiver"})," for the ",(0,i.jsx)(t.code,{children:"code"})," parameter and ",(0,i.jsx)(t.code,{children:"receiver.value"})," for the ",(0,i.jsx)(t.code,{children:"scope"})," parameter. These two parameters combined with table name ",(0,i.jsx)(t.code,{children:'"testtaba"'})," provide access to the partition of the RAM cache used by this multi-index table, in this example you will initialize the ",(0,i.jsx)(t.code,{children:"testtab"})," data member in the smart contract constructor"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:"// contract class constructor\nmulti_index_example( name receiver, name code, datastream<const char*> ds ) :\n   // contract base class contructor\n   contract(receiver, code, ds),\n   // instantiate multi-index instance as data member (find it defined below)\n+   testtab(receiver, receiver.value)\n   { }\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Now you have instantiated a multi-index table, and assigned to ",(0,i.jsx)(t.code,{children:"testtab"})," variable, which has a primary index defined for its ",(0,i.jsx)(t.code,{children:"test_primary"})," data member."]}),"\n",(0,i.jsxs)(t.p,{children:["Here is how the definition of a ",(0,i.jsx)(t.code,{children:"multi_index_example"})," contract containing a multi-index table could look like after following all the steps above."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"multi_index_example.hpp"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#include <sysio/sysio.hpp>\nusing namespace sysio;\n\n// multi-index example contract class\nclass [[sysio::contract]] multi_index_example : public contract {\n   public:\n      using contract::contract;\n\n      // contract class constructor\n      multi_index_example( name receiver, name code, datastream<const char*> ds ) :\n         // contract base class contructor\n         contract(receiver, code, ds),\n         // instantiate multi-index instance as data member (find it defined below)\n         testtab(receiver, receiver.value)\n         { }\n\n      // the row structure of the multi-index table, that is, each row of the table\n      // will contain an instance of this type of structure\n      struct [[sysio::table]] test_table {\n        // this data member stores a name for each row of the multi-index table\n        name test_primary;\n        // additional data stored in table row\n        uint64_t datum;\n        // mandatory definition for primary key getter\n        uint64_t primary_key( ) const { return test_primary.value; }\n      };\n\n      // the multi-index type definition, for ease of use define a type alias `test_table_t`, \n      // based on the multi_index template type, parametarized with a random name and \n      // the test_table data structure\n      typedef sysio::multi_index<"testtaba"_n, test_table> test_table_t;\n\n      // the multi-index table instance declared as a data member of type test_table_t\n      test_table_t testtab;\n\n      [[sysio::action]] void set( name user );\n      [[sysio::action]] void print( name user );\n\n      using set_action = action_wrapper<"set"_n, &multi_index_example::set>;\n      using print_action = action_wrapper<"print"_n, &multi_index_example::print>;\n};\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["| A full example project demonstrating the instantiation and usage of multi-index table can be found ",(0,i.jsx)(t.a,{href:"https://github.com/Wire-Network/cdt/blob/main/examples/multi_index_example",children:"here"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(t.p,{children:"In conclusion, the above instructions show how to define and instantiate a multi-index table instance."}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["You can ",(0,i.jsx)(t.a,{href:"./how-to-insert-data-into-a-multi-index-table",children:"insert data in the multi-index table"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["You can ",(0,i.jsx)(t.a,{href:"./how-to-iterate-and-retrieve-a-multi_index-table",children:"iterate and retrieve data"})," from the multi-index table."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>d});var i=n(96540);const a={},r=i.createContext(a);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);