"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[8272],{96461:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});var n=a(74848),i=a(28453);const c={},r=void 0,s={id:"api-reference/wire-cdt/best-practices/abi/manually_write_an_ABI_file_explained",title:"manually_write_an_ABI_file_explained",description:"\x3c!-- ---",source:"@site/docs/api-reference/wire-cdt/best-practices/abi/manually_write_an_ABI_file_explained.md",sourceDirName:"api-reference/wire-cdt/best-practices/abi",slug:"/api-reference/wire-cdt/best-practices/abi/manually_write_an_ABI_file_explained",permalink:"/docs/api-reference/wire-cdt/best-practices/abi/manually_write_an_ABI_file_explained",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/edit/master/docs/api-reference/wire-cdt/best-practices/abi/manually_write_an_ABI_file_explained.md",tags:[],version:"current",frontMatter:{}},d={},o=[{value:"Adding Ricardian Contracts and Clauses to ABI",id:"adding-ricardian-contracts-and-clauses-to-abi",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Advanced features of the newest version of the ABI will require manual construction of the ABI, and odd and advanced C++ patterns could capsize the generator's type deductions. So having a good knowledge of how to write an ABI should be an essential piece of knowledge of a smart contract writer."}),"\n",(0,n.jsxs)(t.li,{children:["Please refer to ",(0,n.jsx)(t.a,{href:"/docs/api-reference/wire-cdt/best-practices/abi/understanding-abi-files#create-an-abi-file",children:"Create an ABI File"})," to learn about the different sections of an ABI."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"adding-ricardian-contracts-and-clauses-to-abi",children:"Adding Ricardian Contracts and Clauses to ABI"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"The ABI generator will try to automatically import contracts and clauses into the generated ABI.  There are a few caveats to this, one is a strict naming policy of the files and an HTML tag used to mark each Ricardian contract and each clause."}),"\n",(0,n.jsxs)(t.li,{children:["The Ricardian contracts should be housed in a file with the name ",(0,n.jsx)(t.code,{children:"<contract name>.contracts.md"})," and the clauses should be in a file named ",(0,n.jsx)(t.code,{children:"<contract name>.clauses.md"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["For each Ricardian contract the header ",(0,n.jsx)(t.code,{children:'<h1 class="contract">ActionName</h1>'})," should be used, as this directs the ABI generator to attach this Ricardian contract to the specified action."]}),"\n",(0,n.jsxs)(t.li,{children:["For each Ricardian clause, the header ",(0,n.jsx)(t.code,{children:'<h1 class="clause">ClauseID</h1>'})," should be used, as this directs the ABI generator to the clause id and the subsequent body."]}),"\n",(0,n.jsxs)(t.li,{children:["The option ",(0,n.jsx)(t.code,{children:"-R"})," has been added to ",(0,n.jsx)(t.a,{href:"/docs/api-reference/tooling/cdt/cdt-cpp",children:(0,n.jsx)(t.code,{children:"cdt-cpp"})}),' to add "resource" paths to search from, so you can place these files in any directory structure you like and use ',(0,n.jsx)(t.code,{children:"-R<path to file>"})," in the same vein as ",(0,n.jsx)(t.code,{children:"-I"})," for include paths."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>s});var n=a(96540);const i={},c=n.createContext(i);function r(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);