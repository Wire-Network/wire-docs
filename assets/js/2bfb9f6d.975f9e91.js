"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[1488],{92701:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>a,frontMatter:()=>s,metadata:()=>d,toc:()=>g});var i=l(74848),o=l(28453);const s={title:"Native Logging",link_text:"Native Logging"},r=void 0,d={id:"api-reference/tooling/nodeop/logging/native-logging/index",title:"Native Logging",description:"Logging for nodeop is controlled by the logging.json file. CLI options can be passed to nodeop to setup logging.json. The logging configuration file can be used to define appenders and tie them to loggers and logging levels.",source:"@site/docs/api-reference/tooling/nodeop/logging/native-logging/index.md",sourceDirName:"api-reference/tooling/nodeop/logging/native-logging",slug:"/api-reference/tooling/nodeop/logging/native-logging/",permalink:"/docs/api-reference/tooling/nodeop/logging/native-logging/",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/docs/api-reference/tooling/nodeop/logging/native-logging/index.md",tags:[],version:"current",frontMatter:{title:"Native Logging",link_text:"Native Logging"},sidebar:"apiReferenceSidebar",previous:{title:"Logging And Tracing",permalink:"/docs/api-reference/tooling/nodeop/logging/"},next:{title:"Setup logging.json",permalink:"/docs/api-reference/tooling/nodeop/logging/native-logging/setup-logging.json"}},t={},g=[{value:"Appenders",id:"appenders",level:2},{value:"Console",id:"console",level:3},{value:"GELF",id:"gelf",level:3},{value:"Loggers",id:"loggers",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Logging for ",(0,i.jsx)(n.code,{children:"nodeop"})," is controlled by the ",(0,i.jsx)(n.code,{children:"logging.json"})," file. CLI options can be passed to ",(0,i.jsx)(n.code,{children:"nodeop"})," to ",(0,i.jsxs)(n.a,{href:"/docs/api-reference/tooling/nodeop/logging/native-logging/setup-logging.json",children:["setup ",(0,i.jsx)(n.code,{children:"logging.json"})]}),". The logging configuration file can be used to define ",(0,i.jsx)(n.a,{href:"#appenders",children:"appenders"})," and tie them to ",(0,i.jsx)(n.a,{href:"#loggers",children:"loggers"})," and ",(0,i.jsx)(n.a,{href:"/docs/api-reference/tooling/nodeop/logging/native-logging/logging-levels",children:"logging levels"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"appenders",children:"Appenders"}),"\n",(0,i.jsx)(n.p,{children:"The logging library built into Wire Sysio supports two appender types:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#appenders",children:"Appenders"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#console",children:"Console"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#gelf",children:"GELF"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#loggers",children:"Loggers"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"console",children:"Console"}),"\n",(0,i.jsx)(n.p,{children:"This will output log messages to the screen. The configuration options are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," - arbitrary name to identify instance for use in loggers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"}),' - "console"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"stream"}),' - "std_out" or "std_err"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"level_colors"})," - maps a log level to a colour","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["level - see ",(0,i.jsx)(n.a,{href:"/docs/api-reference/tooling/nodeop/logging/native-logging/logging-levels",children:"logging levels"})]}),"\n",(0,i.jsx)(n.li,{children:'color - may be one of ("red", "green", "brown", "blue", "magenta", "cyan", "white", "console_default")'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enabled"})," - bool value to enable/disable the appender."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "name": "consoleout",\n    "type": "console",\n    "args": {\n    "stream": "std_out",\n\n    "level_colors": [{\n        "level": "debug",\n        "color": "green"\n        },{\n        "level": "warn",\n        "color": "brown"\n        },{\n        "level": "error",\n        "color": "red"\n        }\n    ]\n    },\n    "enabled": true\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"gelf",children:"GELF"}),"\n",(0,i.jsxs)(n.p,{children:["This sends the log messages to ",(0,i.jsx)(n.code,{children:"Graylog"}),". ",(0,i.jsx)(n.code,{children:"Graylog"})," is a fully integrated platform for collecting, indexing, and analyzing log messages. The configuration options are:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," - arbitrary name to identify instance for use in loggers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type"}),' - "gelf"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"endpoint"})," - ip address and port number"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"host"})," - Graylog hostname, identifies you to Graylog."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enabled"})," - bool value to enable/disable the appender."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "name": "net",\n    "type": "gelf",\n    "args": {\n        "endpoint": "104.198.210.18:12202\u201d,\n        "host": <YOURNAMEHERE IN QUOTES>\n    },\n    "enabled": true\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"loggers",children:"Loggers"}),"\n",(0,i.jsx)(n.p,{children:"The logging library built into Wire Sysio currently supports the following loggers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"default"})," - the default logger, always enabled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"net_plugin_impl"})," - detailed logging for the net plugin."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"http_plugin"})," - detailed logging for the http plugin."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"producer_plugin"})," - detailed logging for the producer plugin."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"state_history"})," - detailed logging for state history plugin."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"transaction_success_tracing"})," - detailed log that emits successful verdicts from relay nodes on the P2P network."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"transaction_failure_tracing"})," - detailed log that emits failed verdicts from relay nodes on the P2P network."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"trace_api"})," - detailed logging for the trace_api plugin."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"blockvault_client_plugin"})," - detailed logging for the blockvault client plugin."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The configuration options are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," - must match one of the names described above."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"level"})," - see logging levels below."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enabled"})," - bool value to enable/disable the logger."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"additivity"})," - true or false"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"appenders"})," - list of appenders by name (name in the appender configuration)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "name": "net_plugin_impl",\n    "level": "debug",\n    "enabled": true,\n    "additivity": false,\n    "appenders": [\n        "net"\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["| The default logging level for all loggers if no ",(0,i.jsx)(n.code,{children:"logging.json"})," is provided is ",(0,i.jsx)(n.code,{children:"info"}),". Each logger can be configured independently in the ",(0,i.jsx)(n.code,{children:"logging.json"})," file."]})})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>d});var i=l(96540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);