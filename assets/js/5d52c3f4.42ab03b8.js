"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[7785],{57122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=n(74848),r=n(28453);const a={},s=void 0,o={id:"api-reference/wire-cdt/how-to-guides/multi-index/how-to-iterate-and-retrieve-a-multi_index-table",title:"how-to-iterate-and-retrieve-a-multi_index-table",description:"\x3c!-- ---",source:"@site/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-iterate-and-retrieve-a-multi_index-table.md",sourceDirName:"api-reference/wire-cdt/how-to-guides/multi-index",slug:"/api-reference/wire-cdt/how-to-guides/multi-index/how-to-iterate-and-retrieve-a-multi_index-table",permalink:"/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-iterate-and-retrieve-a-multi_index-table",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/edit/master/docs/api-reference/wire-cdt/how-to-guides/multi-index/how-to-iterate-and-retrieve-a-multi_index-table.md",tags:[],version:"current",frontMatter:{}},d={},l=[{value:"Overview",id:"overview",level:2},{value:"Reference",id:"reference",level:2},{value:"Before you begin",id:"before-you-begin",level:2},{value:"Procedure",id:"procedure",level:2},{value:"1. Define The print(...) Action",id:"1-define-the-print-action",level:3},{value:"2. Implement The <code>print(...)</code> Action",id:"2-implement-the-print-action",level:3},{value:"3. Put It All Together",id:"3-put-it-all-together",level:3},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"This guide provides instructions to iterate and retrieve data from a multi-index table."}),"\n",(0,i.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsx)(t.p,{children:"Relevant classes and methods:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"multi-index"})," class."]}),"\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"multi-index::find(...)"})," method."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"before-you-begin",children:"Before you begin"}),"\n",(0,i.jsx)(t.p,{children:"Make sure you have the following prerequisites in place:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["A Wire development environment, for details consult the ",(0,i.jsx)(t.a,{href:"https://docs.eosnetwork.com/docs/latest/getting-started/",children:"Get Started Guide"}),","]}),"\n",(0,i.jsxs)(t.li,{children:["A multi-index ",(0,i.jsx)(t.code,{children:"testab"})," table instance which stores ",(0,i.jsx)(t.code,{children:"user"})," objects indexed by the primary key which is of type ",(0,i.jsx)(t.code,{children:"sysio::name"}),". Consult the section ",(0,i.jsx)(t.a,{href:"./how-to-instantiate-a-multi-index-table",children:"How to instantiate a multi-index table"})," to learn how to set it up."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"procedure",children:"Procedure"}),"\n",(0,i.jsxs)(t.p,{children:["Complete the following steps to iterate, retrieve and print data from the ",(0,i.jsx)(t.code,{children:"testtab"})," multi-index table."]}),"\n",(0,i.jsx)(t.h3,{id:"1-define-the-print-action",children:"1. Define The print(...) Action"}),"\n",(0,i.jsxs)(t.p,{children:["Add a ",(0,i.jsx)(t.code,{children:"print"})," action to the ",(0,i.jsx)(t.code,{children:"testtab"})," multi-index table. The ",(0,i.jsx)(t.code,{children:"print"})," action takes an account name as a parameter."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"[[sysio::action]] void print( name user );\n"})}),"\n",(0,i.jsx)(t.p,{children:"Optionally, for ease of use add the action wrapper definition as well."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:'[[sysio::action]] void print( name user );\n\n+using print_action = action_wrapper<"print"_n, &multi_index_example::print>;\n'})}),"\n",(0,i.jsxs)(t.h3,{id:"2-implement-the-print-action",children:["2. Implement The ",(0,i.jsx)(t.code,{children:"print(...)"})," Action"]}),"\n",(0,i.jsxs)(t.p,{children:["Search for the ",(0,i.jsx)(t.code,{children:"user"})," name in the multi-index table using the primary index. If found, print out the value of field ",(0,i.jsx)(t.code,{children:"datum"}),". Otherwise raise an error with a custom message. In the contract definition add the following implementation for ",(0,i.jsx)(t.code,{children:"print"})," action:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'  [[sysio::action]] void multi_index_example::print( name user ) {\n    // searches for the row that corresponds to the user parameter\n    auto itr = testtab.find(user.value);\n    \n    // asserts if the row was found for user parameter, if fails use the given message\n    check( itr != testtab.end(), "user does not exist in table" );\n\n    // prints the test_primary and datum fields stored for user parameter\n    sysio::print_f("Test Table : {%, %}\\n", itr->test_primary, itr->datum);\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"3-put-it-all-together",children:"3. Put It All Together"}),"\n",(0,i.jsx)(t.p,{children:"The full definition and implementation files for the contract should look like this:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"multi_index_example.hpp"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#include <sysio/sysio.hpp>\nusing namespace sysio;\n\n// multi-index example contract class\nclass [[sysio::contract]] multi_index_example : public contract {\n   public:\n      using contract::contract;\n\n      // contract class constructor\n      multi_index_example( name receiver, name code, datastream<const char*> ds ) :\n         // contract base class contructor\n         contract(receiver, code, ds),\n         // instantiate multi-index instance as data member (find it defined below)\n         testtab(receiver, receiver.value)\n         { }\n\n      // the row structure of the multi-index table, that is, each row of the table\n      // will contain an instance of this type of structure\n      struct [[sysio::table]] test_table {\n        // this data member stores a name for each row of the multi-index table\n        name test_primary;\n        // additional data stored in table row\n        uint64_t datum;\n        // mandatory definition for primary key getter\n        uint64_t primary_key( ) const { return test_primary.value; }\n      };\n\n      // the multi-index type definition, for ease of use define a type alias `test_table_t`, \n      // based on the multi_index template type, parametarized with a random name and \n      // the test_table data structure\n      typedef sysio::multi_index<"testtaba"_n, test_table> test_table_t;\n\n      // the multi-index table instance declared as a data member of type test_table_t\n      test_table_t testtab;\n\n      [[sysio::action]] void set( name user );\n      [[sysio::action]] void print( name user );\n\n      using set_action = action_wrapper<"set"_n, &multi_index_example::set>;\n      using print_action = action_wrapper<"print"_n, &multi_index_example::print>;\n};\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"multi_index_example.cpp"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#include <multi_index_example.hpp>\n\n[[sysio::action]] void multi_index_example::set( name user ) {\n  // check if the user already exists\n  auto itr = testtab.find(user.value);\n\n  if ( itr == testtab.end() ) {\n    // user is not found in table, use emplace to insert a new row data structure in table\n    testtab.emplace( _self, [&]( auto& u ) {\n      u.test_primary = user;\n      u.secondary = "second"_n;\n      u.datum = 0;\n    });\n  }\n}\n\n[[sysio::action]] void multi_index_example::print( name user ) {\n  // searches for the row that corresponds to the user parameter\n  auto itr = testtab.find(user.value);\n  \n  // asserts if the row was found for user parameter, if fails use the given message\n  check( itr != testtab.end(), "user does not exist in table" );\n\n  // prints the test_primary and datum fields stored for user parameter\n  sysio::print_f("Test Table : {%, %}\\n", itr->test_primary, itr->datum);\n}\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["| A full example project demonstrating the instantiation and usage of multi-index table can be found ",(0,i.jsx)(t.a,{href:"https://github.com/Wire-Network/cdt/blob/main/examples/multi_index_example",children:"here"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(t.p,{children:"In conclusion, the above instructions show how to iterate and retrieve a multi-index table."}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["You can ",(0,i.jsx)(t.a,{href:"./how-to-insert-data-into-a-multi-index-table",children:"insert data"})," into the multi-index table."]}),"\n",(0,i.jsxs)(t.li,{children:["You can ",(0,i.jsx)(t.a,{href:"./how-to-delete-data-from-a-multi-index-table",children:"delete data"})," from the multi-index table."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(96540);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);