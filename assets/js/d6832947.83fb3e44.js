"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[5610],{55705:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=i(74848),a=i(28453);const o={},s=void 0,r={id:"api-reference/tooling/nodeop/plugins/chain-plugin",title:"chain-plugin",description:"Description",source:"@site/docs/api-reference/tooling/nodeop/plugins/chain-plugin.md",sourceDirName:"api-reference/tooling/nodeop/plugins",slug:"/api-reference/tooling/nodeop/plugins/chain-plugin",permalink:"/wire-docs/docs/api-reference/tooling/nodeop/plugins/chain-plugin",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/docs/api-reference/tooling/nodeop/plugins/chain-plugin.md",tags:[],version:"current",frontMatter:{},sidebar:"apiReferenceSidebar",previous:{title:"chain-api-plugin",permalink:"/wire-docs/docs/api-reference/tooling/nodeop/plugins/chain-api-plugin"},next:{title:"db-size-api-plugin",permalink:"/wire-docs/docs/api-reference/tooling/nodeop/plugins/db-size-api-plugin"}},l={},c=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Operations",id:"operations",level:2},{value:"Options",id:"options",level:2},{value:"Dependencies",id:"dependencies",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"chain_plugin"})," is a core plugin required to process and aggregate chain data on an Wire node."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:"# config.ini\nplugin = sysio::chain_plugin\n[options]\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"# command-line\nnodeop ... --plugin sysio::chain_plugin [operations] [options]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"operations",children:"Operations"}),"\n",(0,t.jsxs)(n.p,{children:["These can only be specified from the ",(0,t.jsx)(n.code,{children:"nodeop"})," command-line:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:"Command Line Options for sysio::chain_plugin:\n\n  --genesis-json arg                    File to read Genesis State from\n  --genesis-timestamp arg               override the initial timestamp in the \n                                        Genesis State file\n  --print-genesis-json                  extract genesis_state from blocks.log \n                                        as JSON, print to console, and exit\n  --extract-genesis-json arg            extract genesis_state from blocks.log \n                                        as JSON, write into specified file, and\n                                        exit\n  --print-build-info                    print build environment information to \n                                        console as JSON and exit\n  --extract-build-info arg              extract build environment information \n                                        as JSON, write into specified file, and\n                                        exit\n  --fix-reversible-blocks               recovers reversible block database if \n                                        that database is in a bad state\n  --force-all-checks                    do not skip any validation checks while\n                                        replaying blocks (useful for replaying \n                                        blocks from untrusted source)\n  --disable-replay-opts                 disable optimizations that specifically\n                                        target replay\n  --replay-blockchain                   clear chain state database and replay \n                                        all blocks\n  --hard-replay-blockchain              clear chain state database, recover as \n                                        many blocks as possible from the block \n                                        log, and then replay those blocks\n  --delete-all-blocks                   clear chain state database and block \n                                        log\n  --truncate-at-block arg (=0))          stop hard replay / block log recovery \n                                        at this block number (if set to \n                                        non-zero number)\n  --terminate-at-block arg (=0))         terminate after reaching this block \n                                        number (if set to a non-zero number))\n  --import-reversible-blocks arg        replace reversible block database with \n                                        blocks imported from specified file and\n                                        then exit\n  --export-reversible-blocks arg        export reversible block database in \n                                        portable format into specified file and\n                                        then exit\n  --snapshot arg                        File to read Snapshot State from\n"})}),"\n",(0,t.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(n.p,{children:["These can be specified from both the ",(0,t.jsx)(n.code,{children:"nodeop"})," command-line or the ",(0,t.jsx)(n.code,{children:"config.ini"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:'Config Options for sysio::chain_plugin:\n\n  --blocks-dir arg (="blocks"))          the location of the blocks directory \n                                        (absolute path or relative to \n                                        application data dir)\n  --blocks-log-stride arg (=4294967295)) split the block log file when the head \n                                        block number is the multiple of the \n                                        stride\n                                        When the stride is reached, the current\n                                        block log and index will be renamed \n                                        \'<blocks-retained-dir>/blocks-<start \n                                        num>-<end num>.log/index\'\n                                        and a new current block log and index \n                                        will be created with the most recent \n                                        block. All files following\n                                        this format will be used to construct \n                                        an extended block log.\n  --max-retained-block-files arg (=10))  the maximum number of blocks files to \n                                        retain so that the blocks in those \n                                        files can be queried.\n                                        When the number is reached, the oldest \n                                        block file would be moved to archive \n                                        dir or deleted if the archive dir is \n                                        empty.\n                                        The retained block log files should not\n                                        be manipulated by users.\n  --blocks-retained-dir arg (=""))       the location of the blocks retained \n                                        directory (absolute path or relative to\n                                        blocks dir).\n                                        If the value is empty, it is set to the\n                                        value of blocks dir.\n  --blocks-archive-dir arg (="archive")) the location of the blocks archive \n                                        directory (absolute path or relative to\n                                        blocks dir).\n                                        If the value is empty, blocks files \n                                        beyond the retained limit will be \n                                        deleted.\n                                        All files in the archive directory are \n                                        completely under user\'s control, i.e. \n                                        they won\'t be accessed by nodeop \n                                        anymore.\n  --fix-irreversible-blocks arg (=1))    When the existing block log is \n                                        inconsistent with the index, allows \n                                        fixing the block log and index files \n                                        automatically - that is, it will take \n                                        the highest indexed block if it is \n                                        valid; otherwise it will repair the \n                                        block log and reconstruct the index.\n  --protocol-features-dir arg (="protocol_features"))\n                                        the location of the protocol_features \n                                        directory (absolute path or relative to\n                                        application config dir)\n  --checkpoint arg                      Pairs of [BLOCK_NUM,BLOCK_ID] that \n                                        should be enforced as checkpoints.\n  --wasm-runtime runtime (=eos-vm-jit))  Override default WASM runtime ( \n                                        "eos-vm-jit", "eos-vm")\n                                        "eos-vm-jit" : A WebAssembly runtime \n                                        that compiles WebAssembly code to \n                                        native x86 code prior to execution.\n                                        "eos-vm" : A WebAssembly interpreter.\n                                        \n  --abi-serializer-max-time-ms arg (=15))\n                                        Override default maximum ABI \n                                        serialization time allowed in ms\n  --chain-state-db-size-mb arg (=1024))  Maximum size (in MiB)) of the chain \n                                        state database\n  --chain-state-db-guard-size-mb arg (=128))\n                                        Safely shut down node when free space \n                                        remaining in the chain state database \n                                        drops below this size (in MiB)).\n  --backing-store arg (=chainbase))      The storage for state, chainbase or \n                                        rocksdb\n  --persistent-storage-num-threads arg (=1))\n                                        Number of rocksdb threads for flush and\n                                        compaction\n  --persistent-storage-max-num-files arg (=-1))\n                                        Max number of rocksdb files to keep \n                                        open. -1 = unlimited.\n  --persistent-storage-write-buffer-size-mb arg (=128))\n                                        Size of a single rocksdb memtable (in \n                                        MiB)\n  --persistent-storage-bytes-per-sync arg (=1048576))\n                                        Rocksdb write rate of flushes and \n                                        compactions.\n  --persistent-storage-mbytes-snapshot-batch arg (=50))\n                                        Rocksdb batch size threshold before \n                                        writing read in snapshot data to \n                                        database.\n  --reversible-blocks-db-size-mb arg (=340))\n                                        Maximum size (in MiB)) of the reversible\n                                        blocks database\n  --reversible-blocks-db-guard-size-mb arg (=2))\n                                        Safely shut down node when free space \n                                        remaining in the reverseible blocks \n                                        database drops below this size (in \n                                        MiB).\n  --signature-cpu-billable-pct arg (=50))\n                                        Percentage of actual signature recovery\n                                        cpu to bill. Whole number percentages, \n                                        e.g. 50 for 50%\n  --chain-threads arg (=2))              Number of worker threads in controller \n                                        thread pool\n  --contracts-console                   print contract\'s output to console\n  --deep-mind                           print deeper information about chain \n                                        operations\n  --telemetry-url arg                   Send Zipkin spans to url. e.g. \n                                        http://127.0.0.1:9411/api/v2/spans\n  --telemetry-service-name arg (=nodeop))\n                                        Zipkin localEndpoint.serviceName sent \n                                        with each span\n  --telemetry-timeout-us arg (=200000))  Timeout for sending Zipkin span.\n  --actor-whitelist arg                 Account added to actor whitelist (may \n                                        specify multiple times)\n  --actor-blacklist arg                 Account added to actor blacklist (may \n                                        specify multiple times)\n  --contract-whitelist arg              Contract account added to contract \n                                        whitelist (may specify multiple times))\n  --contract-blacklist arg              Contract account added to contract \n                                        blacklist (may specify multiple times))\n  --action-blacklist arg                Action (in the form code::action)) added\n                                        to action blacklist (may specify \n                                        multiple times)\n  --key-blacklist arg                   Public key added to blacklist of keys \n                                        that should not be included in \n                                        authorities (may specify multiple \n                                        times)\n  --sender-bypass-whiteblacklist arg    Deferred transactions sent by accounts \n                                        in this list do not have any of the \n                                        subjective whitelist/blacklist checks \n                                        applied to them (may specify multiple \n                                        times)\n  --read-mode arg (=speculative))        Database read mode ("speculative", \n                                        "head", "read-only", "irreversible").\n                                        In "speculative" mode: database \n                                        contains state changes by transactions \n                                        in the blockchain up to the head block \n                                        as well as some transactions not yet \n                                        included in the blockchain.\n                                        In "head" mode: database contains state\n                                        changes by only transactions in the \n                                        blockchain up to the head block; \n                                        transactions received by the node are \n                                        relayed if valid.\n                                        In "read-only" mode: (DEPRECATED: see \n                                        p2p-accept-transactions & \n                                        api-accept-transactions) database \n                                        contains state changes by only \n                                        transactions in the blockchain up to \n                                        the head block; transactions received \n                                        via the P2P network are not relayed and\n                                        transactions cannot be pushed via the \n                                        chain API.\n                                        In "irreversible" mode: database \n                                        contains state changes by only \n                                        transactions in the blockchain up to \n                                        the last irreversible block; \n                                        transactions received via the P2P \n                                        network are not relayed and \n                                        transactions cannot be pushed via the \n                                        chain API.\n                                        \n  --api-accept-transactions arg (=1))    Allow API transactions to be evaluated \n                                        and relayed if valid.\n  --validation-mode arg (=full))         Chain validation mode ("full" or \n                                        "light").\n                                        In "full" mode all incoming blocks will\n                                        be fully validated.\n                                        In "light" mode all incoming blocks \n                                        headers will be fully validated; \n                                        transactions in those validated blocks \n                                        will be trusted \n                                        \n  --disable-ram-billing-notify-checks   Disable the check which subjectively \n                                        fails a transaction if a contract bills\n                                        more RAM to another account within the \n                                        context of a notification handler (i.e.\n                                        when the receiver is not the code of \n                                        the action).\n  --maximum-variable-signature-length arg (=16384))\n                                        Subjectively limit the maximum length \n                                        of variable components in a variable \n                                        legnth signature to this size in bytes\n  --trusted-producer arg                Indicate a producer whose blocks \n                                        headers signed by it will be fully \n                                        validated, but transactions in those \n                                        validated blocks will be trusted.\n  --database-map-mode arg (=mapped))     Database map mode ("mapped", "heap", or\n                                        "locked").\n                                        In "mapped" mode database is memory \n                                        mapped as a file.\n                                        In "heap" mode database is preloaded in\n                                        to swappable memory and will use huge \n                                        pages if available.\n                                        In "locked" mode database is preloaded,\n                                        locked in to memory, and will use huge \n                                        pages if available.\n                                        \n  --enable-account-queries arg (=0))     enable queries to find accounts by \n                                        various metadata.\n  --max-nonprivileged-inline-action-size arg (=4096))\n                                        maximum allowed size (in bytes)) of an \n                                        inline action for a nonprivileged \n                                        account\n'})}),"\n",(0,t.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsx)(n.p,{children:"None"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(96540);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);