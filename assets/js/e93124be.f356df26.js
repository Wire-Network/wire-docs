"use strict";(self.webpackChunkwire_docs=self.webpackChunkwire_docs||[]).push([[4059],{51658:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var l=t(74848),r=t(28453);const i={title:"Logging Levels"},o=void 0,a={id:"api-reference/tooling/nodeop/logging/native-logging/logging-levels",title:"Logging Levels",description:"There are six available logging levels:",source:"@site/docs/api-reference/tooling/nodeop/logging/native-logging/logging-levels.md",sourceDirName:"api-reference/tooling/nodeop/logging/native-logging",slug:"/api-reference/tooling/nodeop/logging/native-logging/logging-levels",permalink:"/docs/api-reference/tooling/nodeop/logging/native-logging/logging-levels",draft:!1,unlisted:!1,editUrl:"https://github.com/Wire-Network/wire-docs/edit/master/docs/api-reference/tooling/nodeop/logging/native-logging/logging-levels.md",tags:[],version:"current",frontMatter:{title:"Logging Levels"},sidebar:"apiReferenceSidebar",previous:{title:"Setup logging.json",permalink:"/docs/api-reference/tooling/nodeop/logging/native-logging/setup-logging.json"},next:{title:"Third-Party Logging And Tracing Integration",permalink:"/docs/api-reference/tooling/nodeop/logging/third-party-logging/"}},s={},d=[];function g(n){const e={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.p,{children:"There are six available logging levels:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"all"}),"\n",(0,l.jsx)(e.li,{children:"debug"}),"\n",(0,l.jsx)(e.li,{children:"info"}),"\n",(0,l.jsx)(e.li,{children:"warn"}),"\n",(0,l.jsx)(e.li,{children:"error"}),"\n",(0,l.jsx)(e.li,{children:"off"}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["Sample ",(0,l.jsx)(e.code,{children:"logging.json"}),":"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:'{\n  "includes": [],\n  "appenders": [{\n      "name": "stderr",\n      "type": "console",\n      "args": {\n        "stream": "std_error",\n        "level_colors": [{\n            "level": "debug",\n            "color": "green"\n          },{\n            "level": "warn",\n            "color": "brown"\n          },{\n            "level": "error",\n            "color": "red"\n          }\n        ],\n        "flush": true\n      },\n      "enabled": true\n    },{\n      "name": "stdout",\n      "type": "console",\n      "args": {\n        "stream": "std_out",\n        "level_colors": [{\n            "level": "debug",\n            "color": "green"\n          },{\n            "level": "warn",\n            "color": "brown"\n          },{\n            "level": "error",\n            "color": "red"\n          }\n        ],\n        "flush": true\n      },\n      "enabled": true\n    },{\n      "name": "net",\n      "type": "gelf",\n      "args": {\n        "endpoint": "10.10.10.10:12201",\n        "host": "host_name"\n      },\n      "enabled": true\n    },{\n      "name": "zip",\n      "type": "zipkin",\n      "args": {\n        "endpoint": "http://127.0.0.1:9411",\n        "path": "/api/v2/spans",\n        "service_name": "nodeop",\n        "timeout_us": 200000\n      },\n      "enabled": true\n    }\n  ],\n  "loggers": [{\n      "name": "default",\n      "level": "debug",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "stderr",\n        "net"\n      ]\n    },{\n      "name": "zipkin",\n      "level": "debug",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "zip"\n      ]\n    },{\n      "name": "net_plugin_impl",\n      "level": "info",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "stderr",\n        "net"\n      ]\n    },{\n      "name": "http_plugin",\n      "level": "debug",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "stderr",\n        "net"\n      ]\n    },{\n      "name": "producer_plugin",\n      "level": "debug",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "stderr",\n        "net"\n      ]\n    },{\n      "name": "transaction_success_tracing",\n      "level": "debug",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "stderr",\n        "net"\n      ]\n    },{\n      "name": "transaction_failure_tracing",\n      "level": "debug",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "stderr",\n        "net"\n      ]\n    },{\n      "name": "state_history",\n      "level": "debug",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "stderr",\n        "net"\n      ]\n    },{\n      "name": "trace_api",\n      "level": "debug",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "stderr",\n        "net"\n      ]\n    },{\n      "name": "blockvault_client_plugin",\n      "level": "debug",\n      "enabled": true,\n      "additivity": false,\n      "appenders": [\n        "stderr",\n        "net"\n      ]\n    }\n  ]\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(g,{...n})}):g(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var l=t(96540);const r={},i=l.createContext(r);function o(n){const e=l.useContext(i);return l.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),l.createElement(i.Provider,{value:e},n.children)}}}]);